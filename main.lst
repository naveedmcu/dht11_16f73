CCS PCM C Compiler, Version 5.070, 56587               12-Jan-23 14:39

               Filename:   C:\Users\HP\Documents\dht11\main.lst

               ROM used:   2947 words (36%)
                           Largest free fragment is 2048
               RAM used:   128 (35%) at main() level
                           142 (39%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0A
0001:  MOVWF  0A
0002:  GOTO   2B8
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   076
....................  
.................... /* 
....................  * Interfacing PIC16F877A microcontroller with DHT11 temperature 
....................  * and humidity sensor. 
....................  * C Code for CCS C compiler. 
....................  * Temperature, humidity and pressure values are displayed on 20x4 LCD. 
....................  * This is a free software with NO WARRANTY. 
....................  * https://simple - circuit.com / 
....................  */ 
.................... // LCD module connections 
.................... #define LCD_RS_PIN PIN_D0 
.................... #define LCD_RW_PIN PIN_D1 
.................... #define LCD_ENABLE_PIN PIN_D2 
.................... #define LCD_DATA4 PIN_D3 
.................... #define LCD_DATA5 PIN_D4 
.................... #define LCD_DATA6 PIN_D5 
.................... #define LCD_DATA7 PIN_D6 
.................... // end LCD module connections 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
004F:  DATA D4,34
0050:  DATA ED,32
0051:  DATA A0,37
0052:  DATA 75,3A
0053:  DATA A0,10
0054:  DATA 20,00
0055:  DATA D4,32
0056:  DATA 6D,38
0057:  DATA BA,12
0058:  DATA EC,3A
0059:  DATA 20,24
005A:  DATA F5,36
005B:  DATA BA,12
005C:  DATA EC,3A
005D:  DATA 20,05
005E:  DATA 0D,00
005F:  DATA 43,34
0060:  DATA E5,31
0061:  DATA EB,39
0062:  DATA F5,36
0063:  DATA A0,22
0064:  DATA 72,39
0065:  DATA 6F,39
0066:  DATA A0,10
0067:  DATA 20,00
0068:  DATA CE,37
0069:  DATA 20,39
006A:  DATA E5,39
006B:  DATA F0,37
006C:  DATA EE,39
006D:  DATA 65,00
006E:  DATA 66,39
006F:  DATA EF,36
0070:  DATA 20,3A
0071:  DATA E8,32
0072:  DATA A0,39
0073:  DATA 65,37
0074:  DATA F3,37
0075:  DATA 72,00
*
00E3:  BCF    0A.0
00E4:  BCF    0A.1
00E5:  BCF    0A.2
00E6:  ADDWF  02,F
00E7:  GOTO   088
00E8:  GOTO   096
00E9:  GOTO   0A4
00EA:  GOTO   0B2
00EB:  GOTO   0C0
00EC:  GOTO   0CE
*
026E:  BSF    03.5
026F:  MOVF   45,W
0270:  XORWF  47,W
0271:  ANDLW  80
0272:  MOVWF  49
0273:  BTFSS  45.7
0274:  GOTO   27A
0275:  COMF   44,F
0276:  COMF   45,F
0277:  INCF   44,F
0278:  BTFSC  03.2
0279:  INCF   45,F
027A:  BTFSS  47.7
027B:  GOTO   281
027C:  COMF   46,F
027D:  COMF   47,F
027E:  INCF   46,F
027F:  BTFSC  03.2
0280:  INCF   47,F
0281:  CLRF   78
0282:  CLRF   79
0283:  CLRF   77
0284:  CLRF   7A
0285:  MOVF   47,W
0286:  BTFSS  03.2
0287:  GOTO   28B
0288:  MOVF   46,W
0289:  BTFSC  03.2
028A:  GOTO   2A5
028B:  MOVLW  10
028C:  MOVWF  48
028D:  BCF    03.0
028E:  RLF    44,F
028F:  RLF    45,F
0290:  RLF    77,F
0291:  RLF    7A,F
0292:  MOVF   47,W
0293:  SUBWF  7A,W
0294:  BTFSS  03.2
0295:  GOTO   298
0296:  MOVF   46,W
0297:  SUBWF  77,W
0298:  BTFSS  03.0
0299:  GOTO   2A1
029A:  MOVF   46,W
029B:  SUBWF  77,F
029C:  BTFSS  03.0
029D:  DECF   7A,F
029E:  MOVF   47,W
029F:  SUBWF  7A,F
02A0:  BSF    03.0
02A1:  RLF    78,F
02A2:  RLF    79,F
02A3:  DECFSZ 48,F
02A4:  GOTO   28D
02A5:  BTFSS  49.7
02A6:  GOTO   2AC
02A7:  COMF   78,F
02A8:  COMF   79,F
02A9:  INCF   78,F
02AA:  BTFSC  03.2
02AB:  INCF   79,F
02AC:  BCF    03.5
02AD:  RETURN
*
0700:  MOVF   0B,W
0701:  BSF    03.5
0702:  MOVWF  3F
0703:  BCF    03.5
0704:  BCF    0B.7
0705:  BSF    03.5
0706:  BSF    03.6
0707:  BSF    0C.7
0708:  BSF    0C.0
0709:  NOP
070A:  NOP
070B:  BCF    03.6
070C:  BTFSS  3F.7
070D:  GOTO   711
070E:  BCF    03.5
070F:  BSF    0B.7
0710:  BSF    03.5
0711:  BCF    03.5
0712:  BSF    03.6
0713:  MOVF   0C,W
0714:  ANDLW  7F
0715:  BTFSC  03.2
0716:  GOTO   772
0717:  BSF    03.5
0718:  BCF    03.6
0719:  MOVWF  3F
071A:  BCF    03.5
071B:  BSF    03.6
071C:  MOVF   0D,W
071D:  BSF    03.5
071E:  BCF    03.6
071F:  MOVWF  40
0720:  BCF    03.5
0721:  BSF    03.6
0722:  MOVF   0F,W
0723:  BSF    03.5
0724:  BCF    03.6
0725:  MOVWF  41
0726:  MOVF   3F,W
0727:  MOVWF  42
0728:  BCF    03.5
0729:  CALL   234
072A:  BSF    03.5
072B:  MOVF   40,W
072C:  BCF    03.5
072D:  BSF    03.6
072E:  MOVWF  0D
072F:  BSF    03.5
0730:  BCF    03.6
0731:  MOVF   41,W
0732:  BCF    03.5
0733:  BSF    03.6
0734:  MOVWF  0F
0735:  BCF    03.6
0736:  MOVF   0B,W
0737:  BSF    03.5
0738:  MOVWF  42
0739:  BCF    03.5
073A:  BCF    0B.7
073B:  BSF    03.5
073C:  BSF    03.6
073D:  BSF    0C.7
073E:  BSF    0C.0
073F:  NOP
0740:  NOP
0741:  BCF    03.6
0742:  BTFSS  42.7
0743:  GOTO   747
0744:  BCF    03.5
0745:  BSF    0B.7
0746:  BSF    03.5
0747:  BCF    03.5
0748:  BSF    03.6
0749:  RLF    0C,W
074A:  RLF    0E,W
074B:  ANDLW  7F
074C:  BTFSC  03.2
074D:  GOTO   772
074E:  BSF    03.5
074F:  BCF    03.6
0750:  MOVWF  3F
0751:  BCF    03.5
0752:  BSF    03.6
0753:  MOVF   0D,W
0754:  BSF    03.5
0755:  BCF    03.6
0756:  MOVWF  40
0757:  BCF    03.5
0758:  BSF    03.6
0759:  MOVF   0F,W
075A:  BSF    03.5
075B:  BCF    03.6
075C:  MOVWF  41
075D:  MOVF   3F,W
075E:  MOVWF  42
075F:  BCF    03.5
0760:  CALL   234
0761:  BSF    03.5
0762:  MOVF   40,W
0763:  BCF    03.5
0764:  BSF    03.6
0765:  MOVWF  0D
0766:  BSF    03.5
0767:  BCF    03.6
0768:  MOVF   41,W
0769:  BCF    03.5
076A:  BSF    03.6
076B:  MOVWF  0F
076C:  INCF   0D,F
076D:  BTFSC  03.2
076E:  INCF   0F,F
076F:  BCF    03.6
0770:  GOTO   700
0771:  BSF    03.6
0772:  BCF    03.6
0773:  RETURN
0774:  BSF    03.5
0775:  MOVF   40,W
0776:  CLRF   78
0777:  SUBWF  3F,W
0778:  BTFSC  03.0
0779:  GOTO   77D
077A:  MOVF   3F,W
077B:  MOVWF  77
077C:  GOTO   789
077D:  CLRF   77
077E:  MOVLW  08
077F:  MOVWF  41
0780:  RLF    3F,F
0781:  RLF    77,F
0782:  MOVF   40,W
0783:  SUBWF  77,W
0784:  BTFSC  03.0
0785:  MOVWF  77
0786:  RLF    78,F
0787:  DECFSZ 41,F
0788:  GOTO   780
0789:  BCF    03.5
078A:  RETURN
078B:  CLRF   77
078C:  CLRF   78
078D:  BSF    03.5
078E:  MOVF   41,W
078F:  BCF    03.0
0790:  BTFSC  42.0
0791:  ADDWF  77,F
0792:  RRF    77,F
0793:  RRF    78,F
0794:  BTFSC  42.1
0795:  ADDWF  77,F
0796:  RRF    77,F
0797:  RRF    78,F
0798:  BTFSC  42.2
0799:  ADDWF  77,F
079A:  RRF    77,F
079B:  RRF    78,F
079C:  BTFSC  42.3
079D:  ADDWF  77,F
079E:  RRF    77,F
079F:  RRF    78,F
07A0:  BTFSC  42.4
07A1:  ADDWF  77,F
07A2:  RRF    77,F
07A3:  RRF    78,F
07A4:  BTFSC  42.5
07A5:  ADDWF  77,F
07A6:  RRF    77,F
07A7:  RRF    78,F
07A8:  BTFSC  42.6
07A9:  ADDWF  77,F
07AA:  RRF    77,F
07AB:  RRF    78,F
07AC:  BTFSC  42.7
07AD:  ADDWF  77,F
07AE:  RRF    77,F
07AF:  RRF    78,F
07B0:  BCF    03.5
07B1:  RETURN
07B2:  MOVF   00,F
07B3:  BTFSC  03.2
07B4:  GOTO   7CE
07B5:  BSF    03.5
07B6:  CLRF   40
07B7:  MOVF   04,W
07B8:  MOVWF  3F
07B9:  BCF    40.0
07BA:  BTFSC  03.7
07BB:  BSF    40.0
07BC:  MOVF   00,W
07BD:  MOVWF  42
07BE:  BCF    03.5
07BF:  CALL   234
07C0:  BSF    03.5
07C1:  MOVF   3F,W
07C2:  MOVWF  04
07C3:  BCF    03.7
07C4:  BTFSC  40.0
07C5:  BSF    03.7
07C6:  INCF   04,F
07C7:  BTFSS  03.2
07C8:  GOTO   7CC
07C9:  BCF    03.5
07CA:  INCF   05,F
07CB:  BSF    03.5
07CC:  BCF    03.5
07CD:  GOTO   7B2
07CE:  RETURN
*
0800:  MOVF   0B,W
0801:  BSF    03.5
0802:  MOVWF  40
0803:  BCF    03.5
0804:  BCF    0B.7
0805:  BSF    03.5
0806:  BSF    03.6
0807:  BSF    0C.7
0808:  BSF    0C.0
0809:  NOP
080A:  NOP
080B:  BCF    03.6
080C:  BTFSS  40.7
080D:  GOTO   011
080E:  BCF    03.5
080F:  BSF    0B.7
0810:  BSF    03.5
0811:  BTFSC  03.0
0812:  GOTO   04B
0813:  BCF    03.5
0814:  BSF    03.6
0815:  MOVF   0C,W
0816:  ANDLW  7F
0817:  BSF    03.5
0818:  BCF    03.6
0819:  MOVWF  40
081A:  BCF    03.5
081B:  BSF    03.6
081C:  MOVF   0D,W
081D:  BSF    03.5
081E:  BCF    03.6
081F:  MOVWF  41
0820:  BCF    03.5
0821:  BSF    03.6
0822:  MOVF   0F,W
0823:  BSF    03.5
0824:  BCF    03.6
0825:  MOVWF  42
0826:  MOVF   40,W
0827:  BCF    03.5
0828:  BTFSS  0C.4
0829:  GOTO   028
082A:  MOVWF  19
082B:  BSF    03.5
082C:  MOVF   41,W
082D:  BCF    03.5
082E:  BSF    03.6
082F:  MOVWF  0D
0830:  BSF    03.5
0831:  BCF    03.6
0832:  MOVF   42,W
0833:  BCF    03.5
0834:  BSF    03.6
0835:  MOVWF  0F
0836:  BCF    03.6
0837:  MOVF   0B,W
0838:  BSF    03.5
0839:  MOVWF  43
083A:  BCF    03.5
083B:  BCF    0B.7
083C:  BSF    03.5
083D:  BSF    03.6
083E:  BSF    0C.7
083F:  BSF    0C.0
0840:  NOP
0841:  NOP
0842:  BCF    03.6
0843:  BTFSS  43.7
0844:  GOTO   048
0845:  BCF    03.5
0846:  BSF    0B.7
0847:  BSF    03.5
0848:  DECFSZ 3F,F
0849:  GOTO   04B
084A:  GOTO   07A
084B:  BCF    03.5
084C:  BSF    03.6
084D:  RLF    0C,W
084E:  RLF    0E,W
084F:  ANDLW  7F
0850:  BSF    03.5
0851:  BCF    03.6
0852:  MOVWF  40
0853:  BCF    03.5
0854:  BSF    03.6
0855:  MOVF   0D,W
0856:  BSF    03.5
0857:  BCF    03.6
0858:  MOVWF  41
0859:  BCF    03.5
085A:  BSF    03.6
085B:  MOVF   0F,W
085C:  BSF    03.5
085D:  BCF    03.6
085E:  MOVWF  42
085F:  MOVF   40,W
0860:  BCF    03.5
0861:  BTFSS  0C.4
0862:  GOTO   061
0863:  MOVWF  19
0864:  BSF    03.5
0865:  MOVF   41,W
0866:  BCF    03.5
0867:  BSF    03.6
0868:  MOVWF  0D
0869:  BSF    03.5
086A:  BCF    03.6
086B:  MOVF   42,W
086C:  BCF    03.5
086D:  BSF    03.6
086E:  MOVWF  0F
086F:  INCF   0D,F
0870:  BTFSC  03.2
0871:  INCF   0F,F
0872:  BCF    03.0
0873:  BSF    03.5
0874:  BCF    03.6
0875:  DECFSZ 3F,F
0876:  GOTO   078
0877:  GOTO   07A
0878:  BCF    03.5
0879:  GOTO   000
087A:  BCF    03.5
087B:  RETURN
087C:  BSF    03.5
087D:  CLRF   47
087E:  MOVF   04,W
087F:  MOVWF  46
0880:  BCF    47.0
0881:  BTFSC  03.7
0882:  BSF    47.0
0883:  SWAPF  40,W
0884:  IORLW  F0
0885:  MOVWF  42
0886:  ADDWF  42,F
0887:  ADDLW  E2
0888:  MOVWF  43
0889:  ADDLW  32
088A:  MOVWF  45
088B:  MOVF   40,W
088C:  ANDLW  0F
088D:  ADDWF  43,F
088E:  ADDWF  43,F
088F:  ADDWF  45,F
0890:  ADDLW  E9
0891:  MOVWF  44
0892:  ADDWF  44,F
0893:  ADDWF  44,F
0894:  SWAPF  3F,W
0895:  ANDLW  0F
0896:  ADDWF  44,F
0897:  ADDWF  45,F
0898:  RLF    44,F
0899:  RLF    45,F
089A:  COMF   45,F
089B:  RLF    45,F
089C:  MOVF   3F,W
089D:  ANDLW  0F
089E:  ADDWF  45,F
089F:  RLF    42,F
08A0:  MOVLW  07
08A1:  MOVWF  41
08A2:  MOVLW  0A
08A3:  ADDWF  45,F
08A4:  DECF   44,F
08A5:  BTFSS  03.0
08A6:  GOTO   0A3
08A7:  ADDWF  44,F
08A8:  DECF   43,F
08A9:  BTFSS  03.0
08AA:  GOTO   0A7
08AB:  ADDWF  43,F
08AC:  DECF   42,F
08AD:  BTFSS  03.0
08AE:  GOTO   0AB
08AF:  ADDWF  42,F
08B0:  DECF   41,F
08B1:  BTFSS  03.0
08B2:  GOTO   0AF
08B3:  MOVLW  C1
08B4:  MOVWF  04
08B5:  BCF    03.7
08B6:  MOVLW  07
08B7:  ANDWF  46,W
08B8:  BCF    46.6
08B9:  ADDWF  04,F
08BA:  MOVLW  C5
08BB:  SUBWF  04,W
08BC:  BTFSC  03.2
08BD:  BSF    46.6
08BE:  MOVF   00,W
08BF:  MOVWF  77
08C0:  BTFSS  03.2
08C1:  GOTO   0CA
08C2:  BTFSC  46.6
08C3:  GOTO   0CA
08C4:  BTFSC  46.4
08C5:  GOTO   0D4
08C6:  BTFSC  46.3
08C7:  GOTO   0CA
08C8:  MOVLW  20
08C9:  GOTO   0CD
08CA:  BSF    46.3
08CB:  BCF    46.4
08CC:  MOVLW  30
08CD:  ADDWF  77,F
08CE:  MOVF   77,W
08CF:  BCF    03.5
08D0:  BTFSS  0C.4
08D1:  GOTO   0D0
08D2:  MOVWF  19
08D3:  BSF    03.5
08D4:  INCF   04,F
08D5:  BTFSS  46.6
08D6:  GOTO   0BA
08D7:  BCF    03.5
08D8:  RETURN
....................  
.................... #list 
....................  
.................... #priority TIMER0,TIMER1 
.................... #fuses HS, NOWDT, NOPROTECT, NOLVP 
.................... #use delay(clock = 8000000) 
*
00ED:  MOVLW  C4
00EE:  MOVWF  04
00EF:  BCF    03.7
00F0:  MOVF   00,W
00F1:  BTFSC  03.2
00F2:  GOTO   100
00F3:  MOVLW  02
00F4:  MOVWF  78
00F5:  CLRF   77
00F6:  DECFSZ 77,F
00F7:  GOTO   0F6
00F8:  DECFSZ 78,F
00F9:  GOTO   0F5
00FA:  MOVLW  97
00FB:  MOVWF  77
00FC:  DECFSZ 77,F
00FD:  GOTO   0FC
00FE:  DECFSZ 00,F
00FF:  GOTO   0F3
0100:  RETURN
.................... #include <lcd.c> // include LCD driver source file 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0172:  BSF    08.3
....................    output_float(LCD_DATA5); 
0173:  BSF    08.4
....................    output_float(LCD_DATA6); 
0174:  BSF    08.5
....................    output_float(LCD_DATA7); 
0175:  BSF    08.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0176:  BCF    03.5
0177:  BSF    08.1
0178:  BSF    03.5
0179:  BCF    08.1
....................    delay_cycles(1); 
017A:  NOP
....................    lcd_output_enable(1); 
017B:  BCF    03.5
017C:  BSF    08.2
017D:  BSF    03.5
017E:  BCF    08.2
....................    delay_cycles(1); 
017F:  NOP
....................    high = lcd_read_nibble(); 
0180:  BCF    03.5
0181:  CALL   137
0182:  MOVF   78,W
0183:  BSF    03.5
0184:  MOVWF  4A
....................        
....................    lcd_output_enable(0); 
0185:  BCF    03.5
0186:  BCF    08.2
0187:  BSF    03.5
0188:  BCF    08.2
....................    delay_cycles(1); 
0189:  NOP
....................    lcd_output_enable(1); 
018A:  BCF    03.5
018B:  BSF    08.2
018C:  BSF    03.5
018D:  BCF    08.2
....................    delay_us(1); 
018E:  GOTO   18F
....................    low = lcd_read_nibble(); 
018F:  BCF    03.5
0190:  CALL   137
0191:  MOVF   78,W
0192:  BSF    03.5
0193:  MOVWF  49
....................        
....................    lcd_output_enable(0); 
0194:  BCF    03.5
0195:  BCF    08.2
0196:  BSF    03.5
0197:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0198:  BCF    08.3
....................    output_drive(LCD_DATA5); 
0199:  BCF    08.4
....................    output_drive(LCD_DATA6); 
019A:  BCF    08.5
....................    output_drive(LCD_DATA7); 
019B:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
019C:  SWAPF  4A,W
019D:  MOVWF  77
019E:  MOVLW  F0
019F:  ANDWF  77,F
01A0:  MOVF   77,W
01A1:  IORWF  49,W
01A2:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0137:  BSF    03.5
0138:  CLRF   4B
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0139:  BSF    08.3
013A:  MOVLW  00
013B:  BCF    03.5
013C:  BTFSC  08.3
013D:  MOVLW  01
013E:  BSF    03.5
013F:  IORWF  4B,F
....................    n |= input(LCD_DATA5) << 1; 
0140:  BSF    08.4
0141:  MOVLW  00
0142:  BCF    03.5
0143:  BTFSC  08.4
0144:  MOVLW  01
0145:  MOVWF  77
0146:  BCF    03.0
0147:  RLF    77,F
0148:  MOVF   77,W
0149:  BSF    03.5
014A:  IORWF  4B,F
....................    n |= input(LCD_DATA6) << 2; 
014B:  BSF    08.5
014C:  MOVLW  00
014D:  BCF    03.5
014E:  BTFSC  08.5
014F:  MOVLW  01
0150:  MOVWF  77
0151:  RLF    77,F
0152:  RLF    77,F
0153:  MOVLW  FC
0154:  ANDWF  77,F
0155:  MOVF   77,W
0156:  BSF    03.5
0157:  IORWF  4B,F
....................    n |= input(LCD_DATA7) << 3; 
0158:  BSF    08.6
0159:  MOVLW  00
015A:  BCF    03.5
015B:  BTFSC  08.6
015C:  MOVLW  01
015D:  MOVWF  77
015E:  RLF    77,F
015F:  RLF    77,F
0160:  RLF    77,F
0161:  MOVLW  F8
0162:  ANDWF  77,F
0163:  MOVF   77,W
0164:  BSF    03.5
0165:  IORWF  4B,F
....................     
....................    return(n); 
0166:  MOVF   4B,W
0167:  MOVWF  78
....................   #else 
0168:  BCF    03.5
0169:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0101:  BSF    03.5
0102:  BTFSC  4A.0
0103:  GOTO   108
0104:  BCF    03.5
0105:  BCF    08.3
0106:  GOTO   10A
0107:  BSF    03.5
0108:  BCF    03.5
0109:  BSF    08.3
010A:  BSF    03.5
010B:  BCF    08.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
010C:  BTFSC  4A.1
010D:  GOTO   112
010E:  BCF    03.5
010F:  BCF    08.4
0110:  GOTO   114
0111:  BSF    03.5
0112:  BCF    03.5
0113:  BSF    08.4
0114:  BSF    03.5
0115:  BCF    08.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0116:  BTFSC  4A.2
0117:  GOTO   11C
0118:  BCF    03.5
0119:  BCF    08.5
011A:  GOTO   11E
011B:  BSF    03.5
011C:  BCF    03.5
011D:  BSF    08.5
011E:  BSF    03.5
011F:  BCF    08.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0120:  BTFSC  4A.3
0121:  GOTO   126
0122:  BCF    03.5
0123:  BCF    08.6
0124:  GOTO   128
0125:  BSF    03.5
0126:  BCF    03.5
0127:  BSF    08.6
0128:  BSF    03.5
0129:  BCF    08.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
012A:  NOP
....................    lcd_output_enable(1); 
012B:  BCF    03.5
012C:  BSF    08.2
012D:  BSF    03.5
012E:  BCF    08.2
....................    delay_us(2); 
012F:  GOTO   130
0130:  GOTO   131
....................    lcd_output_enable(0); 
0131:  BCF    03.5
0132:  BCF    08.2
0133:  BSF    03.5
0134:  BCF    08.2
0135:  BCF    03.5
0136:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
016A:  BSF    03.5
016B:  BCF    08.2
....................    lcd_rs_tris(); 
016C:  BCF    08.0
....................    lcd_rw_tris(); 
016D:  BCF    08.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
016E:  BCF    03.5
016F:  BCF    08.0
0170:  BSF    03.5
0171:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
01A3:  MOVF   78,W
01A4:  MOVWF  49
01A5:  BTFSC  49.7
01A6:  GOTO   172
....................    lcd_output_rs(address); 
01A7:  MOVF   47,F
01A8:  BTFSS  03.2
01A9:  GOTO   1AE
01AA:  BCF    03.5
01AB:  BCF    08.0
01AC:  GOTO   1B0
01AD:  BSF    03.5
01AE:  BCF    03.5
01AF:  BSF    08.0
01B0:  BSF    03.5
01B1:  BCF    08.0
....................    delay_cycles(1); 
01B2:  NOP
....................    lcd_output_rw(0); 
01B3:  BCF    03.5
01B4:  BCF    08.1
01B5:  BSF    03.5
01B6:  BCF    08.1
....................    delay_cycles(1); 
01B7:  NOP
....................    lcd_output_enable(0); 
01B8:  BCF    03.5
01B9:  BCF    08.2
01BA:  BSF    03.5
01BB:  BCF    08.2
....................    lcd_send_nibble(n >> 4); 
01BC:  SWAPF  48,W
01BD:  MOVWF  49
01BE:  MOVLW  0F
01BF:  ANDWF  49,F
01C0:  MOVF   49,W
01C1:  MOVWF  4A
01C2:  BCF    03.5
01C3:  CALL   101
....................    lcd_send_nibble(n & 0xf); 
01C4:  BSF    03.5
01C5:  MOVF   48,W
01C6:  ANDLW  0F
01C7:  MOVWF  49
01C8:  MOVWF  4A
01C9:  BCF    03.5
01CA:  CALL   101
01CB:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
01CC:  MOVLW  28
01CD:  BSF    03.5
01CE:  MOVWF  40
01CF:  MOVLW  0C
01D0:  MOVWF  41
01D1:  MOVLW  01
01D2:  MOVWF  42
01D3:  MOVLW  06
01D4:  MOVWF  43
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
01D5:  BCF    03.5
01D6:  BCF    08.2
01D7:  BSF    03.5
01D8:  BCF    08.2
....................    lcd_output_rs(0); 
01D9:  BCF    03.5
01DA:  BCF    08.0
01DB:  BSF    03.5
01DC:  BCF    08.0
....................    lcd_output_rw(0); 
01DD:  BCF    03.5
01DE:  BCF    08.1
01DF:  BSF    03.5
01E0:  BCF    08.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
01E1:  BCF    08.3
....................    output_drive(LCD_DATA5); 
01E2:  BCF    08.4
....................    output_drive(LCD_DATA6); 
01E3:  BCF    08.5
....................    output_drive(LCD_DATA7); 
01E4:  BCF    08.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
01E5:  BCF    08.2
....................    lcd_rs_tris(); 
01E6:  BCF    08.0
....................    lcd_rw_tris(); 
01E7:  BCF    08.1
....................  #endif 
....................      
....................    delay_ms(15); 
01E8:  MOVLW  0F
01E9:  MOVWF  44
01EA:  BCF    03.5
01EB:  CALL   0ED
....................    for(i=1;i<=3;++i) 
01EC:  MOVLW  01
01ED:  BSF    03.5
01EE:  MOVWF  3F
01EF:  MOVF   3F,W
01F0:  SUBLW  03
01F1:  BTFSS  03.0
01F2:  GOTO   1FF
....................    { 
....................        lcd_send_nibble(3); 
01F3:  MOVLW  03
01F4:  MOVWF  4A
01F5:  BCF    03.5
01F6:  CALL   101
....................        delay_ms(5); 
01F7:  MOVLW  05
01F8:  BSF    03.5
01F9:  MOVWF  44
01FA:  BCF    03.5
01FB:  CALL   0ED
01FC:  BSF    03.5
01FD:  INCF   3F,F
01FE:  GOTO   1EF
....................    } 
....................     
....................    lcd_send_nibble(2); 
01FF:  MOVLW  02
0200:  MOVWF  4A
0201:  BCF    03.5
0202:  CALL   101
....................    delay_ms(5); 
0203:  MOVLW  05
0204:  BSF    03.5
0205:  MOVWF  44
0206:  BCF    03.5
0207:  CALL   0ED
....................    for(i=0;i<=3;++i) 
0208:  BSF    03.5
0209:  CLRF   3F
020A:  MOVF   3F,W
020B:  SUBLW  03
020C:  BTFSS  03.0
020D:  GOTO   21C
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
020E:  MOVLW  C0
020F:  ADDWF  3F,W
0210:  MOVWF  04
0211:  BCF    03.7
0212:  MOVF   00,W
0213:  MOVWF  44
0214:  CLRF   47
0215:  MOVF   44,W
0216:  MOVWF  48
0217:  BCF    03.5
0218:  CALL   16A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0219:  BSF    03.5
021A:  INCF   3F,F
021B:  GOTO   20A
021C:  BCF    03.5
021D:  BSF    0A.3
021E:  BCF    0A.4
021F:  GOTO   390 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0220:  BSF    03.5
0221:  DECFSZ 44,W
0222:  GOTO   224
0223:  GOTO   227
....................       address=LCD_LINE_TWO; 
0224:  MOVLW  40
0225:  MOVWF  45
0226:  GOTO   228
....................    else 
....................       address=0; 
0227:  CLRF   45
....................       
....................    address+=x-1; 
0228:  MOVLW  01
0229:  SUBWF  43,W
022A:  ADDWF  45,F
....................    lcd_send_byte(0,0x80|address); 
022B:  MOVF   45,W
022C:  IORLW  80
022D:  MOVWF  46
022E:  CLRF   47
022F:  MOVF   46,W
0230:  MOVWF  48
0231:  BCF    03.5
0232:  CALL   16A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0233:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0234:  BSF    03.5
0235:  MOVF   42,W
0236:  XORLW  07
0237:  BCF    03.5
0238:  BTFSC  03.2
0239:  GOTO   244
023A:  XORLW  0B
023B:  BTFSC  03.2
023C:  GOTO   24B
023D:  XORLW  06
023E:  BTFSC  03.2
023F:  GOTO   257
0240:  XORLW  02
0241:  BTFSC  03.2
0242:  GOTO   25F
0243:  GOTO   266
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0244:  MOVLW  01
0245:  BSF    03.5
0246:  MOVWF  43
0247:  MOVWF  44
0248:  BCF    03.5
0249:  CALL   220
024A:  GOTO   26D
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
024B:  BSF    03.5
024C:  CLRF   47
024D:  MOVLW  01
024E:  MOVWF  48
024F:  BCF    03.5
0250:  CALL   16A
....................                      delay_ms(2); 
0251:  MOVLW  02
0252:  BSF    03.5
0253:  MOVWF  44
0254:  BCF    03.5
0255:  CALL   0ED
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0256:  GOTO   26D
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0257:  MOVLW  01
0258:  BSF    03.5
0259:  MOVWF  43
025A:  MOVLW  02
025B:  MOVWF  44
025C:  BCF    03.5
025D:  CALL   220
025E:  GOTO   26D
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
025F:  BSF    03.5
0260:  CLRF   47
0261:  MOVLW  10
0262:  MOVWF  48
0263:  BCF    03.5
0264:  CALL   16A
0265:  GOTO   26D
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0266:  MOVLW  01
0267:  BSF    03.5
0268:  MOVWF  47
0269:  MOVF   42,W
026A:  MOVWF  48
026B:  BCF    03.5
026C:  CALL   16A
....................      #endif 
....................    } 
026D:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #use fast_io(B) 
.................... #define DHT11_PIN PIN_A0 // connection pin between DHT11 and mcu 
.................... #define digit_one_on output_high(PIN_C0) 
.................... #define digit_one_off output_low(PIN_C0) 
.................... #define digit_two_on output_high(PIN_C1) 
.................... #define digit_two_off output_low(PIN_C1) 
.................... #define digit_three_on output_high(PIN_C2) 
.................... #define digit_three_off output_low(PIN_C2) 
.................... #define digit_four_on output_high(PIN_C3) 
.................... #define digit_four_off output_low(PIN_C3) 
.................... #define digit_five_on output_high(PIN_C4) 
.................... #define digit_five_off output_low(PIN_C4) 
.................... #define digit_six_on output_high(PIN_C5) 
.................... #define digit_six_off output_low(PIN_C5) 
.................... #define rly1_on output_low(PIN_A1) 
.................... #define rly1_off output_high(PIN_A1) 
.................... #define rly2_on output_low(PIN_A2) 
.................... #define rly2_off output_high(PIN_A2) 
.................... #define set_button input_state(PIN_E0) 
.................... #define up_button input_state(PIN_E1) 
.................... #define down_button input_state(PIN_E2) 
.................... #define TimeOut_Count 100 
.................... #define press 0 
.................... #define nopress 1 
.................... #rom  getenv ("EEPROM_ADDRESS")= {25,20,50,40,0,0,0,0} 
.................... #use rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7) 
.................... char message1[] = "Temp = 00.0 C  "; 
*
0AE0:  MOVLW  54
0AE1:  BCF    03.5
0AE2:  MOVWF  2B
0AE3:  MOVLW  65
0AE4:  MOVWF  2C
0AE5:  MOVLW  6D
0AE6:  MOVWF  2D
0AE7:  MOVLW  70
0AE8:  MOVWF  2E
0AE9:  MOVLW  20
0AEA:  MOVWF  2F
0AEB:  MOVLW  3D
0AEC:  MOVWF  30
0AED:  MOVLW  20
0AEE:  MOVWF  31
0AEF:  MOVLW  30
0AF0:  MOVWF  32
0AF1:  MOVWF  33
0AF2:  MOVLW  2E
0AF3:  MOVWF  34
0AF4:  MOVLW  30
0AF5:  MOVWF  35
0AF6:  MOVLW  20
0AF7:  MOVWF  36
0AF8:  MOVLW  43
0AF9:  MOVWF  37
0AFA:  MOVLW  20
0AFB:  MOVWF  38
0AFC:  MOVWF  39
0AFD:  CLRF   3A
.................... char message2[] = "RH   = 00.0 %  "; 
0AFE:  MOVLW  52
0AFF:  MOVWF  3B
0B00:  MOVLW  48
0B01:  MOVWF  3C
0B02:  MOVLW  20
0B03:  MOVWF  3D
0B04:  MOVWF  3E
0B05:  MOVWF  3F
0B06:  MOVLW  3D
0B07:  MOVWF  40
0B08:  MOVLW  20
0B09:  MOVWF  41
0B0A:  MOVLW  30
0B0B:  MOVWF  42
0B0C:  MOVWF  43
0B0D:  MOVLW  2E
0B0E:  MOVWF  44
0B0F:  MOVLW  30
0B10:  MOVWF  45
0B11:  MOVLW  20
0B12:  MOVWF  46
0B13:  MOVLW  25
0B14:  MOVWF  47
0B15:  MOVLW  20
0B16:  MOVWF  48
0B17:  MOVWF  49
0B18:  CLRF   4A
.................... short Time_out; 
.................... unsigned int8 T_byte1, T_byte2, RH_byte1, RH_byte2, CheckSum; 
.................... char digit[] = {~192, ~249, ~164, ~176, ~153, ~146, ~130, ~248, ~128, ~144, 192, ~134, ~135, ~163, ~171, ~142, ~191,~0b10000111,~0b10001100,~0b00001001}; 
0B19:  MOVLW  3F
0B1A:  MOVWF  51
0B1B:  MOVLW  06
0B1C:  MOVWF  52
0B1D:  MOVLW  5B
0B1E:  MOVWF  53
0B1F:  MOVLW  4F
0B20:  MOVWF  54
0B21:  MOVLW  66
0B22:  MOVWF  55
0B23:  MOVLW  6D
0B24:  MOVWF  56
0B25:  MOVLW  7D
0B26:  MOVWF  57
0B27:  MOVLW  07
0B28:  MOVWF  58
0B29:  MOVLW  7F
0B2A:  MOVWF  59
0B2B:  MOVLW  6F
0B2C:  MOVWF  5A
0B2D:  MOVLW  C0
0B2E:  MOVWF  5B
0B2F:  MOVLW  79
0B30:  MOVWF  5C
0B31:  MOVLW  78
0B32:  MOVWF  5D
0B33:  MOVLW  5C
0B34:  MOVWF  5E
0B35:  MOVLW  54
0B36:  MOVWF  5F
0B37:  MOVLW  71
0B38:  MOVWF  60
0B39:  MOVLW  40
0B3A:  MOVWF  61
0B3B:  MOVLW  78
0B3C:  MOVWF  62
0B3D:  MOVLW  73
0B3E:  MOVWF  63
0B3F:  MOVLW  F6
0B40:  MOVWF  64
.................... int8 digit_one, digit_two, digit_three, digit_four, digit_five, digit_six; 
.................... int8 sec, min, hour, active_timer = 0, timer2a = 0; 
.................... int8 cnt = 0, cnt1 = 1; 
.................... signed int8 on_time_sec, on_time_min, on_time_hour; 
.................... signed int8 off_time_sec, off_time_min, off_time_hour; 
.................... signed int8 counter_sec, counter_min, counter_hour; 
.................... int32 one_sec_counter; 
.................... int8 dataReady=0; 
.................... signed int16 temp_high,temp_low,hum_high,hum_low,menu_counter=0,main_temp,main_hum; 
.................... void dht11_RunTime(); 
.................... void menu(); 
.................... void runtime_relay_function(); 
.................... void start_signal() 
.................... { 
....................    output_drive (DHT11_PIN); // configure connection pin as output 
*
08DA:  BSF    03.5
08DB:  BCF    05.0
....................    output_low (DHT11_PIN); // connection pin output low 
08DC:  BCF    05.0
08DD:  BCF    03.5
08DE:  BCF    05.0
....................    delay_ms (25) ; 
08DF:  MOVLW  19
08E0:  BSF    03.5
08E1:  MOVWF  44
08E2:  BCF    0A.3
08E3:  BCF    03.5
08E4:  CALL   0ED
08E5:  BSF    0A.3
....................    output_high (DHT11_PIN); // connection pin output high 
08E6:  BSF    03.5
08E7:  BCF    05.0
08E8:  BCF    03.5
08E9:  BSF    05.0
....................    delay_us (30) ; 
08EA:  MOVLW  13
08EB:  MOVWF  77
08EC:  DECFSZ 77,F
08ED:  GOTO   0EC
08EE:  GOTO   0EF
....................    output_float (DHT11_PIN); // configure connection pin as input 
08EF:  BSF    03.5
08F0:  BSF    05.0
.................... } 
....................  
.................... short check_response() 
.................... { 
....................    delay_us (40) ; 
08F1:  MOVLW  1A
08F2:  MOVWF  77
08F3:  DECFSZ 77,F
08F4:  GOTO   0F3
08F5:  NOP
....................    if (!input (DHT11_PIN)) 
08F6:  BSF    05.0
08F7:  BCF    03.5
08F8:  BTFSC  05.0
08F9:  GOTO   109
....................    { 
....................       // read and test if connection pin is low 
....................       delay_us (80) ; 
08FA:  MOVLW  35
08FB:  MOVWF  77
08FC:  DECFSZ 77,F
08FD:  GOTO   0FC
....................       if (input (DHT11_PIN)) 
08FE:  BSF    03.5
08FF:  BSF    05.0
0900:  BCF    03.5
0901:  BTFSS  05.0
0902:  GOTO   109
....................       { 
....................          // read and test if connection pin is high 
....................          delay_us (50) ; 
0903:  MOVLW  21
0904:  MOVWF  77
0905:  DECFSZ 77,F
0906:  GOTO   105
....................          return 1; 
0907:  MOVLW  01
0908:  MOVWF  78
....................       } 
....................    } 
.................... } 
....................  
.................... unsigned int8 Read_Data() 
*
069E:  BSF    03.5
069F:  CLRF   41
.................... { 
....................    unsigned int8 i, k, _data = 0; // k is used to count 1 bit reading duration 
....................    if (Time_out) 
06A0:  BCF    03.5
06A1:  BTFSS  4B.0
06A2:  GOTO   6A3
....................    break; 
....................    for (i = 0; i < 8; i++) 
06A3:  BSF    03.5
06A4:  CLRF   3F
06A5:  MOVF   3F,W
06A6:  SUBLW  07
06A7:  BTFSS  03.0
06A8:  GOTO   6FC
....................    { 
....................       k = 0; 
06A9:  CLRF   40
....................       while (!input (DHT11_PIN)) 
06AA:  BSF    05.0
06AB:  BCF    03.5
06AC:  BTFSC  05.0
06AD:  GOTO   6BB
....................       { 
....................          // Wait until DHT11 pin get raised 
....................          k++; 
06AE:  BSF    03.5
06AF:  INCF   40,F
....................          if (k > TimeOut_Count) 
06B0:  MOVF   40,W
06B1:  SUBLW  64
06B2:  BTFSC  03.0
06B3:  GOTO   6B8
....................          { 
....................             Time_out = 1; 
06B4:  BCF    03.5
06B5:  BSF    4B.0
....................             break; 
06B6:  GOTO   6BB
06B7:  BSF    03.5
....................          } 
....................  
....................          delay_us (1) ; 
06B8:  GOTO   6B9
06B9:  GOTO   6AA
06BA:  BCF    03.5
....................       } 
....................       delay_us (30) ; 
06BB:  MOVLW  13
06BC:  MOVWF  77
06BD:  DECFSZ 77,F
06BE:  GOTO   6BD
06BF:  GOTO   6C0
....................       if (!input (DHT11_PIN)) 
06C0:  BSF    03.5
06C1:  BSF    05.0
06C2:  BCF    03.5
06C3:  BTFSC  05.0
06C4:  GOTO   6D8
....................       bit_clear (_data, (7 - i) ); // Clear bit (7 - i) 
06C5:  BSF    03.5
06C6:  MOVF   3F,W
06C7:  SUBLW  07
06C8:  MOVWF  42
06C9:  MOVLW  01
06CA:  MOVWF  77
06CB:  MOVF   42,W
06CC:  MOVWF  78
06CD:  BTFSC  03.2
06CE:  GOTO   6D3
06CF:  BCF    03.0
06D0:  RLF    77,F
06D1:  DECFSZ 78,F
06D2:  GOTO   6CF
06D3:  MOVF   77,W
06D4:  XORLW  FF
06D5:  ANDWF  41,F
06D6:  GOTO   6F8
06D7:  BCF    03.5
....................       else 
....................       { 
....................          bit_set (_data, (7 - i) ); // Set bit (7 - i) 
06D8:  BSF    03.5
06D9:  MOVF   3F,W
06DA:  SUBLW  07
06DB:  MOVWF  42
06DC:  MOVLW  01
06DD:  MOVWF  77
06DE:  MOVF   42,W
06DF:  MOVWF  78
06E0:  BTFSC  03.2
06E1:  GOTO   6E6
06E2:  BCF    03.0
06E3:  RLF    77,F
06E4:  DECFSZ 78,F
06E5:  GOTO   6E2
06E6:  MOVF   77,W
06E7:  IORWF  41,F
....................          while (input (DHT11_PIN)) 
06E8:  BSF    05.0
06E9:  BCF    03.5
06EA:  BTFSS  05.0
06EB:  GOTO   6F9
....................          { 
....................             // Wait until DHT11 pin goes low 
....................             k++; 
06EC:  BSF    03.5
06ED:  INCF   40,F
....................             if (k > TimeOut_Count) 
06EE:  MOVF   40,W
06EF:  SUBLW  64
06F0:  BTFSC  03.0
06F1:  GOTO   6F6
....................             { 
....................                Time_out = 1; 
06F2:  BCF    03.5
06F3:  BSF    4B.0
....................                break; 
06F4:  GOTO   6F9
06F5:  BSF    03.5
....................             } 
....................             delay_us (1) ; 
06F6:  GOTO   6F7
06F7:  GOTO   6E8
06F8:  BCF    03.5
....................          } 
....................       } 
06F9:  BSF    03.5
06FA:  INCF   3F,F
06FB:  GOTO   6A5
....................    } 
....................    return _data; 
06FC:  MOVF   41,W
06FD:  MOVWF  78
06FE:  BCF    03.5
06FF:  RETURN
.................... } 
....................  
.................... //============================================================================== 
.................... void display_time() 
.................... { 
....................    digit_one = digit[ (hour / 10) % 10]; 
....................    digit_two = digit[hour % 10]; 
....................    digit_three = digit[ (min / 10) % 10]; 
....................    digit_four = digit[min % 10]; 
....................    digit_five = digit[ (sec / 10) % 10]; 
....................    digit_six = digit[sec % 10]; 
.................... } 
....................  
.................... //============================================================================== 
.................... void display_set_on() 
.................... { 
....................    digit_one = digit[10]; 
....................    digit_two = digit[11]; 
....................    digit_three = digit[12]; 
....................    digit_four = digit[13]; 
....................    digit_five = digit[14]; 
....................    digit_six = digit[16]; 
.................... } 
....................  
.................... //============================================================================== 
.................... void display_set_off() 
.................... { 
....................    digit_one = digit[10]; 
....................    digit_two = digit[11]; 
....................    digit_three = digit[12]; 
....................    digit_four = digit[13]; 
....................    digit_five = digit[15]; 
....................    digit_six = digit[15]; 
.................... } 
.................... void display_err() 
.................... { 
....................    digit_one = digit[13]; 
*
05FC:  BCF    03.5
05FD:  MOVF   5E,W
05FE:  MOVWF  65
....................    digit_two = digit[15]; 
05FF:  MOVF   60,W
0600:  MOVWF  66
....................    digit_three = digit[15]; 
0601:  MOVF   60,W
0602:  MOVWF  67
....................    digit_four = digit[10]; 
0603:  MOVF   5B,W
0604:  MOVWF  68
....................    digit_five = digit[10]; 
0605:  MOVF   5B,W
0606:  MOVWF  69
....................    digit_six = digit[10]; 
0607:  MOVF   5B,W
0608:  MOVWF  6A
.................... } 
.................... void display_ok() 
.................... { 
....................    digit_one = digit[10]; 
*
0680:  MOVF   5B,W
0681:  MOVWF  65
....................    digit_two = digit[10]; 
0682:  MOVF   5B,W
0683:  MOVWF  66
....................    digit_three = digit[10]; 
0684:  MOVF   5B,W
0685:  MOVWF  67
....................    digit_four = digit[10]; 
0686:  MOVF   5B,W
0687:  MOVWF  68
....................    digit_five = digit[10]; 
0688:  MOVF   5B,W
0689:  MOVWF  69
....................    digit_six = digit[10]; 
068A:  MOVF   5B,W
068B:  MOVWF  6A
.................... } 
....................  
.................... //============================================================================== 
.................... void display_set_hour() 
.................... { 
....................    digit_one = digit[ (hour / 10) % 10]; 
....................    digit_two = digit[hour % 10]; 
....................    digit_three = digit[16]; 
....................    digit_four = digit[16]; 
....................    digit_five = digit[16]; 
....................    digit_six = digit[16]; 
.................... } 
....................  
.................... //============================================================================== 
.................... void display_set_min() 
.................... { 
....................    digit_one = digit[16]; 
....................    digit_two = digit[16]; 
....................    digit_three = digit[ (min / 10) % 10]; 
....................    digit_four = digit[min % 10]; 
....................    digit_five = digit[16]; 
....................    digit_six = digit[16]; 
.................... } 
....................  
.................... //============================================================================== 
.................... void display_set_sec() 
.................... { 
....................    digit_one = digit[16]; 
....................    digit_two = digit[16]; 
....................    digit_three = digit[16]; 
....................    digit_four = digit[16]; 
....................    digit_five = digit[ (sec / 10) % 10]; 
....................    digit_six = digit[sec % 10]; 
.................... } 
.................... //============================================================================= 
.................... void fill_display_buff(signed int16 data,int8 titale) 
.................... { 
....................  if(titale == 1){ 
*
02AE:  BSF    03.5
02AF:  DECFSZ 41,W
02B0:  GOTO   2F8
....................   digit_one = digit[(data/10)%10]; 
02B1:  MOVF   40,W
02B2:  MOVWF  45
02B3:  MOVF   3F,W
02B4:  MOVWF  44
02B5:  CLRF   47
02B6:  MOVLW  0A
02B7:  MOVWF  46
02B8:  BCF    03.5
02B9:  CALL   26E
02BA:  MOVF   79,W
02BB:  BSF    03.5
02BC:  MOVWF  43
02BD:  MOVF   78,W
02BE:  MOVWF  42
02BF:  MOVF   43,W
02C0:  MOVWF  45
02C1:  MOVF   42,W
02C2:  MOVWF  44
02C3:  CLRF   47
02C4:  MOVLW  0A
02C5:  MOVWF  46
02C6:  BCF    03.5
02C7:  CALL   26E
02C8:  MOVF   77,W
02C9:  BSF    03.5
02CA:  MOVWF  42
02CB:  MOVF   7A,W
02CC:  MOVWF  43
02CD:  MOVLW  51
02CE:  ADDWF  42,W
02CF:  MOVWF  04
02D0:  BCF    03.7
02D1:  BTFSC  43.0
02D2:  BSF    03.7
02D3:  MOVF   00,W
02D4:  BCF    03.5
02D5:  MOVWF  65
....................   digit_two = digit[(data/1)%10]; 
02D6:  BSF    03.5
02D7:  MOVF   40,W
02D8:  MOVWF  45
02D9:  MOVF   3F,W
02DA:  MOVWF  44
02DB:  CLRF   47
02DC:  MOVLW  0A
02DD:  MOVWF  46
02DE:  BCF    03.5
02DF:  CALL   26E
02E0:  MOVF   77,W
02E1:  BSF    03.5
02E2:  MOVWF  42
02E3:  MOVF   7A,W
02E4:  MOVWF  43
02E5:  MOVLW  51
02E6:  ADDWF  42,W
02E7:  MOVWF  04
02E8:  BCF    03.7
02E9:  BTFSC  43.0
02EA:  BSF    03.7
02EB:  MOVF   00,W
02EC:  BCF    03.5
02ED:  MOVWF  66
....................   digit_three = digit[10]; 
02EE:  MOVF   5B,W
02EF:  MOVWF  67
....................   digit_four =digit[10]; 
02F0:  MOVF   5B,W
02F1:  MOVWF  68
....................   digit_five =digit[17];  
02F2:  MOVF   62,W
02F3:  MOVWF  69
....................   digit_six = digit[1]; 
02F4:  MOVF   52,W
02F5:  MOVWF  6A
....................  }else if(titale == 2){ 
02F6:  GOTO   3D7
02F7:  BSF    03.5
02F8:  MOVF   41,W
02F9:  SUBLW  02
02FA:  BTFSS  03.2
02FB:  GOTO   343
....................   digit_one = digit[(data/10)%10]; 
02FC:  MOVF   40,W
02FD:  MOVWF  45
02FE:  MOVF   3F,W
02FF:  MOVWF  44
0300:  CLRF   47
0301:  MOVLW  0A
0302:  MOVWF  46
0303:  BCF    03.5
0304:  CALL   26E
0305:  MOVF   79,W
0306:  BSF    03.5
0307:  MOVWF  43
0308:  MOVF   78,W
0309:  MOVWF  42
030A:  MOVF   43,W
030B:  MOVWF  45
030C:  MOVF   42,W
030D:  MOVWF  44
030E:  CLRF   47
030F:  MOVLW  0A
0310:  MOVWF  46
0311:  BCF    03.5
0312:  CALL   26E
0313:  MOVF   77,W
0314:  BSF    03.5
0315:  MOVWF  42
0316:  MOVF   7A,W
0317:  MOVWF  43
0318:  MOVLW  51
0319:  ADDWF  42,W
031A:  MOVWF  04
031B:  BCF    03.7
031C:  BTFSC  43.0
031D:  BSF    03.7
031E:  MOVF   00,W
031F:  BCF    03.5
0320:  MOVWF  65
....................   digit_two = digit[(data/1)%10]; 
0321:  BSF    03.5
0322:  MOVF   40,W
0323:  MOVWF  45
0324:  MOVF   3F,W
0325:  MOVWF  44
0326:  CLRF   47
0327:  MOVLW  0A
0328:  MOVWF  46
0329:  BCF    03.5
032A:  CALL   26E
032B:  MOVF   77,W
032C:  BSF    03.5
032D:  MOVWF  42
032E:  MOVF   7A,W
032F:  MOVWF  43
0330:  MOVLW  51
0331:  ADDWF  42,W
0332:  MOVWF  04
0333:  BCF    03.7
0334:  BTFSC  43.0
0335:  BSF    03.7
0336:  MOVF   00,W
0337:  BCF    03.5
0338:  MOVWF  66
....................   digit_three = digit[10]; 
0339:  MOVF   5B,W
033A:  MOVWF  67
....................   digit_four =digit[10]; 
033B:  MOVF   5B,W
033C:  MOVWF  68
....................   digit_five =digit[17];  
033D:  MOVF   62,W
033E:  MOVWF  69
....................   digit_six = digit[2]; 
033F:  MOVF   53,W
0340:  MOVWF  6A
....................  }else if(titale == 3){ 
0341:  GOTO   3D7
0342:  BSF    03.5
0343:  MOVF   41,W
0344:  SUBLW  03
0345:  BTFSS  03.2
0346:  GOTO   38E
....................   digit_one = digit[(data/10)%10]; 
0347:  MOVF   40,W
0348:  MOVWF  45
0349:  MOVF   3F,W
034A:  MOVWF  44
034B:  CLRF   47
034C:  MOVLW  0A
034D:  MOVWF  46
034E:  BCF    03.5
034F:  CALL   26E
0350:  MOVF   79,W
0351:  BSF    03.5
0352:  MOVWF  43
0353:  MOVF   78,W
0354:  MOVWF  42
0355:  MOVF   43,W
0356:  MOVWF  45
0357:  MOVF   42,W
0358:  MOVWF  44
0359:  CLRF   47
035A:  MOVLW  0A
035B:  MOVWF  46
035C:  BCF    03.5
035D:  CALL   26E
035E:  MOVF   77,W
035F:  BSF    03.5
0360:  MOVWF  42
0361:  MOVF   7A,W
0362:  MOVWF  43
0363:  MOVLW  51
0364:  ADDWF  42,W
0365:  MOVWF  04
0366:  BCF    03.7
0367:  BTFSC  43.0
0368:  BSF    03.7
0369:  MOVF   00,W
036A:  BCF    03.5
036B:  MOVWF  65
....................   digit_two = digit[(data/1)%10]; 
036C:  BSF    03.5
036D:  MOVF   40,W
036E:  MOVWF  45
036F:  MOVF   3F,W
0370:  MOVWF  44
0371:  CLRF   47
0372:  MOVLW  0A
0373:  MOVWF  46
0374:  BCF    03.5
0375:  CALL   26E
0376:  MOVF   77,W
0377:  BSF    03.5
0378:  MOVWF  42
0379:  MOVF   7A,W
037A:  MOVWF  43
037B:  MOVLW  51
037C:  ADDWF  42,W
037D:  MOVWF  04
037E:  BCF    03.7
037F:  BTFSC  43.0
0380:  BSF    03.7
0381:  MOVF   00,W
0382:  BCF    03.5
0383:  MOVWF  66
....................   digit_three = digit[10]; 
0384:  MOVF   5B,W
0385:  MOVWF  67
....................   digit_four =digit[10]; 
0386:  MOVF   5B,W
0387:  MOVWF  68
....................   digit_five =digit[19];  
0388:  MOVF   64,W
0389:  MOVWF  69
....................   digit_six = digit[1]; 
038A:  MOVF   52,W
038B:  MOVWF  6A
....................  }else if(titale == 4){ 
038C:  GOTO   3D7
038D:  BSF    03.5
038E:  MOVF   41,W
038F:  SUBLW  04
0390:  BTFSS  03.2
0391:  GOTO   3D8
....................   digit_one = digit[(data/10)%10]; 
0392:  MOVF   40,W
0393:  MOVWF  45
0394:  MOVF   3F,W
0395:  MOVWF  44
0396:  CLRF   47
0397:  MOVLW  0A
0398:  MOVWF  46
0399:  BCF    03.5
039A:  CALL   26E
039B:  MOVF   79,W
039C:  BSF    03.5
039D:  MOVWF  43
039E:  MOVF   78,W
039F:  MOVWF  42
03A0:  MOVF   43,W
03A1:  MOVWF  45
03A2:  MOVF   42,W
03A3:  MOVWF  44
03A4:  CLRF   47
03A5:  MOVLW  0A
03A6:  MOVWF  46
03A7:  BCF    03.5
03A8:  CALL   26E
03A9:  MOVF   77,W
03AA:  BSF    03.5
03AB:  MOVWF  42
03AC:  MOVF   7A,W
03AD:  MOVWF  43
03AE:  MOVLW  51
03AF:  ADDWF  42,W
03B0:  MOVWF  04
03B1:  BCF    03.7
03B2:  BTFSC  43.0
03B3:  BSF    03.7
03B4:  MOVF   00,W
03B5:  BCF    03.5
03B6:  MOVWF  65
....................   digit_two = digit[(data/1)%10]; 
03B7:  BSF    03.5
03B8:  MOVF   40,W
03B9:  MOVWF  45
03BA:  MOVF   3F,W
03BB:  MOVWF  44
03BC:  CLRF   47
03BD:  MOVLW  0A
03BE:  MOVWF  46
03BF:  BCF    03.5
03C0:  CALL   26E
03C1:  MOVF   77,W
03C2:  BSF    03.5
03C3:  MOVWF  42
03C4:  MOVF   7A,W
03C5:  MOVWF  43
03C6:  MOVLW  51
03C7:  ADDWF  42,W
03C8:  MOVWF  04
03C9:  BCF    03.7
03CA:  BTFSC  43.0
03CB:  BSF    03.7
03CC:  MOVF   00,W
03CD:  BCF    03.5
03CE:  MOVWF  66
....................   digit_three = digit[10]; 
03CF:  MOVF   5B,W
03D0:  MOVWF  67
....................   digit_four =digit[10]; 
03D1:  MOVF   5B,W
03D2:  MOVWF  68
....................   digit_five =digit[19];  
03D3:  MOVF   64,W
03D4:  MOVWF  69
....................   digit_six = digit[2]; 
03D5:  MOVF   53,W
03D6:  MOVWF  6A
03D7:  BSF    03.5
....................  } 
03D8:  BCF    03.5
03D9:  RETURN
.................... } 
.................... //============================================================================= 
.................... void dht_display() 
.................... { 
....................    digit_one = digit[message1[7]-48]; 
*
041C:  MOVLW  30
041D:  SUBWF  32,W
041E:  ADDLW  51
041F:  MOVWF  04
0420:  BCF    03.7
0421:  MOVF   00,W
0422:  MOVWF  65
....................    digit_two = digit[message1[8] -48]; 
0423:  MOVLW  30
0424:  SUBWF  33,W
0425:  ADDLW  51
0426:  MOVWF  04
0427:  BCF    03.7
0428:  MOVF   00,W
0429:  MOVWF  66
....................    digit_three = digit[message1[10] -48]; 
042A:  MOVLW  30
042B:  SUBWF  35,W
042C:  ADDLW  51
042D:  MOVWF  04
042E:  BCF    03.7
042F:  MOVF   00,W
0430:  MOVWF  67
....................    digit_four = digit[10]; 
0431:  MOVF   5B,W
0432:  MOVWF  68
....................    digit_five = digit[message2[7] -48]; 
0433:  MOVLW  30
0434:  SUBWF  42,W
0435:  ADDLW  51
0436:  MOVWF  04
0437:  BCF    03.7
0438:  MOVF   00,W
0439:  MOVWF  69
....................    digit_six = digit[message2[8] -48]; 
043A:  MOVLW  30
043B:  SUBWF  43,W
043C:  ADDLW  51
043D:  MOVWF  04
043E:  BCF    03.7
043F:  MOVF   00,W
0440:  MOVWF  6A
.................... } 
.................... //============================================================================= 
....................   void temp_down_set(){ 
....................   static unsigned int16 press_counter = 0; 
....................   if(up_button == press) 
*
04A9:  BTFSC  09.1
04AA:  GOTO   4D8
....................   { 
....................    while(up_button == press) 
04AB:  BTFSC  09.1
04AC:  GOTO   4C1
....................    { 
....................      press_counter++; 
04AD:  BSF    03.5
04AE:  INCF   33,F
04AF:  BTFSC  03.2
04B0:  INCF   34,F
....................      if(press_counter >= 35000){ 
04B1:  MOVF   34,W
04B2:  SUBLW  87
04B3:  BTFSC  03.0
04B4:  GOTO   4BF
04B5:  XORLW  FF
04B6:  BTFSS  03.2
04B7:  GOTO   4BC
04B8:  MOVF   33,W
04B9:  SUBLW  B7
04BA:  BTFSC  03.0
04BB:  GOTO   4BF
....................      break; 
04BC:  BCF    03.5
04BD:  GOTO   4C1
04BE:  BSF    03.5
....................     } 
04BF:  BCF    03.5
04C0:  GOTO   4AB
....................    } 
....................    press_counter = 0; 
04C1:  BSF    03.5
04C2:  CLRF   34
04C3:  CLRF   33
....................    temp_low++; 
04C4:  INCF   27,F
04C5:  BTFSC  03.2
04C6:  INCF   28,F
....................    if(temp_low >= 99) 
04C7:  BTFSC  28.7
04C8:  GOTO   4D6
04C9:  MOVF   28,F
04CA:  BTFSS  03.2
04CB:  GOTO   4D0
04CC:  MOVF   27,W
04CD:  SUBLW  62
04CE:  BTFSC  03.0
04CF:  GOTO   4D6
....................    { 
....................     temp_low == 0; 
04D0:  MOVF   27,F
04D1:  BTFSS  03.2
04D2:  GOTO   4D5
04D3:  MOVF   28,F
04D4:  BTFSS  03.2
04D5:  MOVLW  00
....................    } 
....................   } 
04D6:  GOTO   502
04D7:  BCF    03.5
....................   else if(down_button == press) 
04D8:  BTFSC  09.2
04D9:  GOTO   503
....................   { 
....................    while(down_button == press) 
04DA:  BTFSC  09.2
04DB:  GOTO   4F0
....................    { 
....................      press_counter++; 
04DC:  BSF    03.5
04DD:  INCF   33,F
04DE:  BTFSC  03.2
04DF:  INCF   34,F
....................      if(press_counter >= 35000){ 
04E0:  MOVF   34,W
04E1:  SUBLW  87
04E2:  BTFSC  03.0
04E3:  GOTO   4EE
04E4:  XORLW  FF
04E5:  BTFSS  03.2
04E6:  GOTO   4EB
04E7:  MOVF   33,W
04E8:  SUBLW  B7
04E9:  BTFSC  03.0
04EA:  GOTO   4EE
....................      break; 
04EB:  BCF    03.5
04EC:  GOTO   4F0
04ED:  BSF    03.5
....................     } 
04EE:  BCF    03.5
04EF:  GOTO   4DA
....................    } 
....................    press_counter = 0; 
04F0:  BSF    03.5
04F1:  CLRF   34
04F2:  CLRF   33
....................    temp_low--; 
04F3:  MOVF   27,W
04F4:  BTFSC  03.2
04F5:  DECF   28,F
04F6:  DECF   27,F
....................    if(temp_low <= 1) 
04F7:  BTFSC  28.7
04F8:  GOTO   500
04F9:  MOVF   28,F
04FA:  BTFSS  03.2
04FB:  GOTO   502
04FC:  MOVF   27,W
04FD:  SUBLW  01
04FE:  BTFSS  03.0
04FF:  GOTO   502
....................    { 
....................     temp_low = 0; 
0500:  CLRF   28
0501:  CLRF   27
0502:  BCF    03.5
....................    } 
....................   } 
....................   fill_display_buff(temp_low,2); 
0503:  BSF    03.5
0504:  MOVF   28,W
0505:  MOVWF  40
0506:  MOVF   27,W
0507:  MOVWF  3F
0508:  MOVLW  02
0509:  MOVWF  41
050A:  BCF    03.5
050B:  CALL   2AE
....................  } 
....................  //============================================================================  
....................  //**************************************************************************** 
....................   void temp_up_set(){ 
....................   static unsigned int16 press_counter = 0; 
....................   if(up_button == press) 
*
0443:  BTFSC  09.1
0444:  GOTO   472
....................   {  
....................    while(up_button == press) 
0445:  BTFSC  09.1
0446:  GOTO   45B
....................    { 
....................      press_counter++; 
0447:  BSF    03.5
0448:  INCF   35,F
0449:  BTFSC  03.2
044A:  INCF   36,F
....................      if(press_counter >= 35000){ 
044B:  MOVF   36,W
044C:  SUBLW  87
044D:  BTFSC  03.0
044E:  GOTO   459
044F:  XORLW  FF
0450:  BTFSS  03.2
0451:  GOTO   456
0452:  MOVF   35,W
0453:  SUBLW  B7
0454:  BTFSC  03.0
0455:  GOTO   459
....................      break; 
0456:  BCF    03.5
0457:  GOTO   45B
0458:  BSF    03.5
....................     } 
0459:  BCF    03.5
045A:  GOTO   445
....................    } 
....................    press_counter = 0; 
045B:  BSF    03.5
045C:  CLRF   36
045D:  CLRF   35
....................    temp_high++; 
045E:  INCF   25,F
045F:  BTFSC  03.2
0460:  INCF   26,F
....................    if(temp_high >= 99) 
0461:  BTFSC  26.7
0462:  GOTO   470
0463:  MOVF   26,F
0464:  BTFSS  03.2
0465:  GOTO   46A
0466:  MOVF   25,W
0467:  SUBLW  62
0468:  BTFSC  03.0
0469:  GOTO   470
....................    { 
....................     temp_high == 0; 
046A:  MOVF   25,F
046B:  BTFSS  03.2
046C:  GOTO   46F
046D:  MOVF   26,F
046E:  BTFSS  03.2
046F:  MOVLW  00
....................    } 
....................   } 
0470:  GOTO   49D
0471:  BCF    03.5
....................   else if(down_button == press) 
0472:  BTFSC  09.2
0473:  GOTO   49E
....................   { 
....................    while(down_button == press) 
0474:  BTFSC  09.2
0475:  GOTO   48A
....................    { 
....................      press_counter++; 
0476:  BSF    03.5
0477:  INCF   35,F
0478:  BTFSC  03.2
0479:  INCF   36,F
....................      if(press_counter >= 35000){ 
047A:  MOVF   36,W
047B:  SUBLW  87
047C:  BTFSC  03.0
047D:  GOTO   488
047E:  XORLW  FF
047F:  BTFSS  03.2
0480:  GOTO   485
0481:  MOVF   35,W
0482:  SUBLW  B7
0483:  BTFSC  03.0
0484:  GOTO   488
....................      break; 
0485:  BCF    03.5
0486:  GOTO   48A
0487:  BSF    03.5
....................     } 
0488:  BCF    03.5
0489:  GOTO   474
....................    } 
....................    press_counter = 0; 
048A:  BSF    03.5
048B:  CLRF   36
048C:  CLRF   35
....................    temp_high--; 
048D:  MOVF   25,W
048E:  BTFSC  03.2
048F:  DECF   26,F
0490:  DECF   25,F
....................    if(temp_high <= 1) 
0491:  BTFSC  26.7
0492:  GOTO   49A
0493:  MOVF   26,F
0494:  BTFSS  03.2
0495:  GOTO   49D
0496:  MOVF   25,W
0497:  SUBLW  01
0498:  BTFSS  03.0
0499:  GOTO   49D
....................    { 
....................     temp_high = 1; 
049A:  CLRF   26
049B:  MOVLW  01
049C:  MOVWF  25
049D:  BCF    03.5
....................    } 
....................   } 
....................    fill_display_buff(temp_high,1); 
049E:  BSF    03.5
049F:  MOVF   26,W
04A0:  MOVWF  40
04A1:  MOVF   25,W
04A2:  MOVWF  3F
04A3:  MOVLW  01
04A4:  MOVWF  41
04A5:  BCF    03.5
04A6:  CALL   2AE
....................  } 
.................... //----------------------------------------------------------------------------- 
....................   void hum_up_set(){ 
....................   static unsigned int16 press_counter = 0; 
....................   if(up_button == press) 
*
050E:  BTFSC  09.1
050F:  GOTO   53D
....................   {  
....................    while(up_button == press) 
0510:  BTFSC  09.1
0511:  GOTO   526
....................    { 
....................      press_counter++; 
0512:  BSF    03.5
0513:  INCF   37,F
0514:  BTFSC  03.2
0515:  INCF   38,F
....................      if(press_counter >= 35000){ 
0516:  MOVF   38,W
0517:  SUBLW  87
0518:  BTFSC  03.0
0519:  GOTO   524
051A:  XORLW  FF
051B:  BTFSS  03.2
051C:  GOTO   521
051D:  MOVF   37,W
051E:  SUBLW  B7
051F:  BTFSC  03.0
0520:  GOTO   524
....................      break; 
0521:  BCF    03.5
0522:  GOTO   526
0523:  BSF    03.5
....................     } 
0524:  BCF    03.5
0525:  GOTO   510
....................    } 
....................    press_counter = 0; 
0526:  BSF    03.5
0527:  CLRF   38
0528:  CLRF   37
....................    hum_high++; 
0529:  INCF   29,F
052A:  BTFSC  03.2
052B:  INCF   2A,F
....................    if(hum_high >= 99) 
052C:  BTFSC  2A.7
052D:  GOTO   53B
052E:  MOVF   2A,F
052F:  BTFSS  03.2
0530:  GOTO   535
0531:  MOVF   29,W
0532:  SUBLW  62
0533:  BTFSC  03.0
0534:  GOTO   53B
....................    { 
....................     hum_high == 0; 
0535:  MOVF   29,F
0536:  BTFSS  03.2
0537:  GOTO   53A
0538:  MOVF   2A,F
0539:  BTFSS  03.2
053A:  MOVLW  00
....................    } 
....................   } 
053B:  GOTO   568
053C:  BCF    03.5
....................   else if(down_button == press) 
053D:  BTFSC  09.2
053E:  GOTO   569
....................   { 
....................    while(down_button == press) 
053F:  BTFSC  09.2
0540:  GOTO   555
....................    { 
....................      press_counter++; 
0541:  BSF    03.5
0542:  INCF   37,F
0543:  BTFSC  03.2
0544:  INCF   38,F
....................      if(press_counter >= 35000){ 
0545:  MOVF   38,W
0546:  SUBLW  87
0547:  BTFSC  03.0
0548:  GOTO   553
0549:  XORLW  FF
054A:  BTFSS  03.2
054B:  GOTO   550
054C:  MOVF   37,W
054D:  SUBLW  B7
054E:  BTFSC  03.0
054F:  GOTO   553
....................      break; 
0550:  BCF    03.5
0551:  GOTO   555
0552:  BSF    03.5
....................     } 
0553:  BCF    03.5
0554:  GOTO   53F
....................    } 
....................    press_counter = 0; 
0555:  BSF    03.5
0556:  CLRF   38
0557:  CLRF   37
....................    hum_high--; 
0558:  MOVF   29,W
0559:  BTFSC  03.2
055A:  DECF   2A,F
055B:  DECF   29,F
....................    if(hum_high <= 1) 
055C:  BTFSC  2A.7
055D:  GOTO   565
055E:  MOVF   2A,F
055F:  BTFSS  03.2
0560:  GOTO   568
0561:  MOVF   29,W
0562:  SUBLW  01
0563:  BTFSS  03.0
0564:  GOTO   568
....................    { 
....................     hum_high = 1; 
0565:  CLRF   2A
0566:  MOVLW  01
0567:  MOVWF  29
0568:  BCF    03.5
....................    } 
....................   } 
....................    fill_display_buff(hum_high,3); 
0569:  BSF    03.5
056A:  MOVF   2A,W
056B:  MOVWF  40
056C:  MOVF   29,W
056D:  MOVWF  3F
056E:  MOVLW  03
056F:  MOVWF  41
0570:  BCF    03.5
0571:  CALL   2AE
....................  } 
.................... //----------------------------------------------------------------------------- 
....................   void hum_down_set(){ 
....................   static unsigned int16 press_counter = 0; 
....................   if(up_button == press) 
*
0574:  BTFSC  09.1
0575:  GOTO   5A3
....................   { 
....................    while(up_button == press) 
0576:  BTFSC  09.1
0577:  GOTO   58C
....................    { 
....................      press_counter++; 
0578:  BSF    03.5
0579:  INCF   39,F
057A:  BTFSC  03.2
057B:  INCF   3A,F
....................      if(press_counter >= 35000){ 
057C:  MOVF   3A,W
057D:  SUBLW  87
057E:  BTFSC  03.0
057F:  GOTO   58A
0580:  XORLW  FF
0581:  BTFSS  03.2
0582:  GOTO   587
0583:  MOVF   39,W
0584:  SUBLW  B7
0585:  BTFSC  03.0
0586:  GOTO   58A
....................      break; 
0587:  BCF    03.5
0588:  GOTO   58C
0589:  BSF    03.5
....................     } 
058A:  BCF    03.5
058B:  GOTO   576
....................    } 
....................    press_counter = 0; 
058C:  BSF    03.5
058D:  CLRF   3A
058E:  CLRF   39
....................    hum_low++; 
058F:  INCF   2B,F
0590:  BTFSC  03.2
0591:  INCF   2C,F
....................    if(hum_low >= 99) 
0592:  BTFSC  2C.7
0593:  GOTO   5A1
0594:  MOVF   2C,F
0595:  BTFSS  03.2
0596:  GOTO   59B
0597:  MOVF   2B,W
0598:  SUBLW  62
0599:  BTFSC  03.0
059A:  GOTO   5A1
....................    { 
....................     hum_low == 0; 
059B:  MOVF   2B,F
059C:  BTFSS  03.2
059D:  GOTO   5A0
059E:  MOVF   2C,F
059F:  BTFSS  03.2
05A0:  MOVLW  00
....................    } 
....................   } 
05A1:  GOTO   5CD
05A2:  BCF    03.5
....................   else if(down_button == press) 
05A3:  BTFSC  09.2
05A4:  GOTO   5CE
....................   { 
....................    while(down_button == press) 
05A5:  BTFSC  09.2
05A6:  GOTO   5BB
....................    { 
....................      press_counter++; 
05A7:  BSF    03.5
05A8:  INCF   39,F
05A9:  BTFSC  03.2
05AA:  INCF   3A,F
....................      if(press_counter >= 35000){ 
05AB:  MOVF   3A,W
05AC:  SUBLW  87
05AD:  BTFSC  03.0
05AE:  GOTO   5B9
05AF:  XORLW  FF
05B0:  BTFSS  03.2
05B1:  GOTO   5B6
05B2:  MOVF   39,W
05B3:  SUBLW  B7
05B4:  BTFSC  03.0
05B5:  GOTO   5B9
....................      break; 
05B6:  BCF    03.5
05B7:  GOTO   5BB
05B8:  BSF    03.5
....................     } 
05B9:  BCF    03.5
05BA:  GOTO   5A5
....................    } 
....................    press_counter = 0; 
05BB:  BSF    03.5
05BC:  CLRF   3A
05BD:  CLRF   39
....................    hum_low--; 
05BE:  MOVF   2B,W
05BF:  BTFSC  03.2
05C0:  DECF   2C,F
05C1:  DECF   2B,F
....................    if(hum_low <= 1) 
05C2:  BTFSC  2C.7
05C3:  GOTO   5CB
05C4:  MOVF   2C,F
05C5:  BTFSS  03.2
05C6:  GOTO   5CD
05C7:  MOVF   2B,W
05C8:  SUBLW  01
05C9:  BTFSS  03.0
05CA:  GOTO   5CD
....................    { 
....................     hum_low = 0; 
05CB:  CLRF   2C
05CC:  CLRF   2B
05CD:  BCF    03.5
....................    } 
....................   } 
....................   fill_display_buff(hum_low,4); 
05CE:  BSF    03.5
05CF:  MOVF   2C,W
05D0:  MOVWF  40
05D1:  MOVF   2B,W
05D2:  MOVWF  3F
05D3:  MOVLW  04
05D4:  MOVWF  41
05D5:  BCF    03.5
05D6:  CALL   2AE
....................  } 
.................... //============================================================================= 
.................... void runtime_relay_function() 
.................... { 
....................   if(main_temp >= temp_high) 
*
0A5D:  BSF    03.5
0A5E:  BTFSS  26.7
0A5F:  GOTO   263
0A60:  BTFSS  30.7
0A61:  GOTO   26F
0A62:  GOTO   265
0A63:  BTFSC  30.7
0A64:  GOTO   274
0A65:  MOVF   26,W
0A66:  SUBWF  30,W
0A67:  BTFSS  03.0
0A68:  GOTO   274
0A69:  BTFSS  03.2
0A6A:  GOTO   26F
0A6B:  MOVF   25,W
0A6C:  SUBWF  2F,W
0A6D:  BTFSS  03.0
0A6E:  GOTO   274
....................   { 
....................    rly1_off; 
0A6F:  BCF    05.1
0A70:  BCF    03.5
0A71:  BSF    05.1
....................   }else if(main_temp <= temp_low) 
0A72:  GOTO   288
0A73:  BSF    03.5
0A74:  BTFSS  30.7
0A75:  GOTO   279
0A76:  BTFSS  28.7
0A77:  GOTO   285
0A78:  GOTO   27B
0A79:  BTFSC  28.7
0A7A:  GOTO   289
0A7B:  MOVF   30,W
0A7C:  SUBWF  28,W
0A7D:  BTFSS  03.0
0A7E:  GOTO   289
0A7F:  BTFSS  03.2
0A80:  GOTO   285
0A81:  MOVF   2F,W
0A82:  SUBWF  27,W
0A83:  BTFSS  03.0
0A84:  GOTO   289
....................   { 
....................    rly1_on;   
0A85:  BCF    05.1
0A86:  BCF    03.5
0A87:  BCF    05.1
0A88:  BSF    03.5
....................   } 
....................   //------------- 
....................   if(main_hum >= hum_high) 
0A89:  BTFSS  2A.7
0A8A:  GOTO   28E
0A8B:  BTFSS  32.7
0A8C:  GOTO   29A
0A8D:  GOTO   290
0A8E:  BTFSC  32.7
0A8F:  GOTO   29F
0A90:  MOVF   2A,W
0A91:  SUBWF  32,W
0A92:  BTFSS  03.0
0A93:  GOTO   29F
0A94:  BTFSS  03.2
0A95:  GOTO   29A
0A96:  MOVF   29,W
0A97:  SUBWF  31,W
0A98:  BTFSS  03.0
0A99:  GOTO   29F
....................   { 
....................    rly2_off; 
0A9A:  BCF    05.2
0A9B:  BCF    03.5
0A9C:  BSF    05.2
....................   }else if(main_hum <= hum_low) 
0A9D:  GOTO   2B3
0A9E:  BSF    03.5
0A9F:  BTFSS  32.7
0AA0:  GOTO   2A4
0AA1:  BTFSS  2C.7
0AA2:  GOTO   2B0
0AA3:  GOTO   2A6
0AA4:  BTFSC  2C.7
0AA5:  GOTO   2B4
0AA6:  MOVF   32,W
0AA7:  SUBWF  2C,W
0AA8:  BTFSS  03.0
0AA9:  GOTO   2B4
0AAA:  BTFSS  03.2
0AAB:  GOTO   2B0
0AAC:  MOVF   31,W
0AAD:  SUBWF  2B,W
0AAE:  BTFSS  03.0
0AAF:  GOTO   2B4
....................   { 
....................    rly2_on;   
0AB0:  BCF    05.2
0AB1:  BCF    03.5
0AB2:  BCF    05.2
0AB3:  BSF    03.5
....................   } 
0AB4:  BCF    03.5
0AB5:  BSF    0A.3
0AB6:  BCF    0A.4
0AB7:  GOTO   3AA (RETURN)
.................... } 
.................... //----------------------------------------------------------------------------- 
.................... void main() 
0AB8:  MOVF   03,W
0AB9:  ANDLW  1F
0ABA:  MOVWF  03
0ABB:  MOVLW  0C
0ABC:  BSF    03.5
0ABD:  MOVWF  19
0ABE:  MOVLW  A2
0ABF:  MOVWF  18
0AC0:  MOVLW  90
0AC1:  BCF    03.5
0AC2:  MOVWF  18
0AC3:  CLRF   6E
0AC4:  CLRF   6F
0AC5:  CLRF   70
0AC6:  MOVLW  01
0AC7:  MOVWF  71
0AC8:  BSF    03.5
0AC9:  CLRF   24
0ACA:  CLRF   2E
0ACB:  CLRF   2D
0ACC:  CLRF   34
0ACD:  CLRF   33
0ACE:  CLRF   36
0ACF:  CLRF   35
0AD0:  CLRF   38
0AD1:  CLRF   37
0AD2:  CLRF   3A
0AD3:  CLRF   39
0AD4:  CLRF   3C
0AD5:  CLRF   3B
0AD6:  CLRF   3D
0AD7:  MOVLW  FF
0AD8:  MOVWF  3E
0AD9:  BSF    1F.0
0ADA:  BSF    1F.1
0ADB:  BSF    1F.2
0ADC:  BCF    1F.3
0ADD:  MOVLW  07
0ADE:  MOVWF  1C
0ADF:  BCF    03.7
.................... { 
....................    temp_high=read_eeprom(0); 
*
0B41:  BSF    03.6
0B42:  CLRF   0D
0B43:  BSF    03.5
0B44:  BCF    0C.7
0B45:  BSF    0C.0
0B46:  BCF    03.5
0B47:  MOVF   0C,W
0B48:  CLRF   7A
0B49:  BSF    03.5
0B4A:  BCF    03.6
0B4B:  MOVWF  25
0B4C:  MOVF   7A,W
0B4D:  MOVWF  26
....................    temp_low=read_eeprom(1); 
0B4E:  MOVLW  01
0B4F:  BCF    03.5
0B50:  BSF    03.6
0B51:  MOVWF  0D
0B52:  BSF    03.5
0B53:  BCF    0C.7
0B54:  BSF    0C.0
0B55:  BCF    03.5
0B56:  MOVF   0C,W
0B57:  CLRF   7A
0B58:  BSF    03.5
0B59:  BCF    03.6
0B5A:  MOVWF  27
0B5B:  MOVF   7A,W
0B5C:  MOVWF  28
....................    hum_high=read_eeprom(2); 
0B5D:  MOVLW  02
0B5E:  BCF    03.5
0B5F:  BSF    03.6
0B60:  MOVWF  0D
0B61:  BSF    03.5
0B62:  BCF    0C.7
0B63:  BSF    0C.0
0B64:  BCF    03.5
0B65:  MOVF   0C,W
0B66:  CLRF   7A
0B67:  BSF    03.5
0B68:  BCF    03.6
0B69:  MOVWF  29
0B6A:  MOVF   7A,W
0B6B:  MOVWF  2A
....................    hum_low=read_eeprom(3); 
0B6C:  MOVLW  03
0B6D:  BCF    03.5
0B6E:  BSF    03.6
0B6F:  MOVWF  0D
0B70:  BSF    03.5
0B71:  BCF    0C.7
0B72:  BSF    0C.0
0B73:  BCF    03.5
0B74:  MOVF   0C,W
0B75:  CLRF   7A
0B76:  BSF    03.5
0B77:  BCF    03.6
0B78:  MOVWF  2B
0B79:  MOVF   7A,W
0B7A:  MOVWF  2C
....................    set_tris_b (0x00) ; 
0B7B:  MOVLW  00
0B7C:  MOVWF  06
....................    SETUP_ADC_PORTS (NO_ANALOGS) ; 
0B7D:  BSF    1F.0
0B7E:  BSF    1F.1
0B7F:  BSF    1F.2
0B80:  BCF    1F.3
....................    //!  SETUP_TIMER_0(T0_INTERNAL | T0_DIV_4); 
....................    setup_timer_0 (RTCC_INTERNAL|RTCC_DIV_128|RTCC_8_BIT); //16.3 ms overflow 
0B81:  MOVF   01,W
0B82:  ANDLW  C0
0B83:  IORLW  06
0B84:  MOVWF  01
.................... //!   setup_timer_1 (T1_INTERNAL|T1_DIV_BY_2);     //32.7 ms overflow 
....................    SET_TIMER0 (128) ; 
0B85:  MOVLW  80
0B86:  BCF    03.5
0B87:  MOVWF  01
.................... //!   SET_TIMER1 (0) ; 
....................    enable_interrupts (int_TIMER0) ; 
0B88:  BSF    0B.5
....................    disable_interrupts (int_TIMER1) ; 
0B89:  BSF    03.5
0B8A:  BCF    0C.0
.................... //!   enable_interrupts (PERIPH) ; 
....................    enable_interrupts (GLOBAL) ; 
0B8B:  MOVLW  C0
0B8C:  BCF    03.5
0B8D:  IORWF  0B,F
....................    lcd_init (); // Initialize LCD module 
0B8E:  BCF    0A.3
0B8F:  GOTO   1CC
0B90:  BSF    0A.3
....................    lcd_putc ('\f'); // LCD clear 
0B91:  MOVLW  0C
0B92:  BSF    03.5
0B93:  MOVWF  42
0B94:  BCF    0A.3
0B95:  BCF    03.5
0B96:  CALL   234
0B97:  BSF    0A.3
....................    delay_ms (1000) ; 
0B98:  MOVLW  04
0B99:  BSF    03.5
0B9A:  MOVWF  3F
0B9B:  MOVLW  FA
0B9C:  MOVWF  44
0B9D:  BCF    0A.3
0B9E:  BCF    03.5
0B9F:  CALL   0ED
0BA0:  BSF    0A.3
0BA1:  BSF    03.5
0BA2:  DECFSZ 3F,F
0BA3:  GOTO   39B
....................    while (TRUE) 
....................    { 
.................... //!   fill_display_buff(999); 
....................       menu(); 
0BA4:  BCF    0A.3
0BA5:  BCF    03.5
0BA6:  GOTO   3DA
0BA7:  BSF    0A.3
....................       dht11_RunTime(); 
0BA8:  GOTO   0D9
....................       runtime_relay_function(); 
0BA9:  GOTO   25D
....................       delay_ms (10) ; 
0BAA:  MOVLW  0A
0BAB:  BSF    03.5
0BAC:  MOVWF  44
0BAD:  BCF    0A.3
0BAE:  BCF    03.5
0BAF:  CALL   0ED
0BB0:  BSF    0A.3
0BB1:  BSF    03.5
0BB2:  GOTO   3A4
....................    } 
.................... } 
.................... void menu() 
0BB3:  SLEEP
.................... { 
.................... if(set_button == press ) 
*
03DA:  BTFSC  09.0
03DB:  GOTO   3E1
....................  { 
....................   menu_counter++; 
03DC:  BSF    03.5
03DD:  INCF   2D,F
03DE:  BTFSC  03.2
03DF:  INCF   2E,F
03E0:  BCF    03.5
.................... //!  if(menu_counter > 5) 
.................... //!  { 
.................... //!   menu_counter = 0; 
.................... //!  } 
....................  } 
....................  switch (menu_counter) 
03E1:  BSF    03.5
03E2:  MOVF   2D,W
03E3:  MOVWF  77
03E4:  MOVF   2E,W
03E5:  MOVWF  7A
03E6:  MOVF   7A,W
03E7:  BTFSS  03.2
03E8:  GOTO   3EE
03E9:  MOVF   77,F
03EA:  BCF    03.5
03EB:  BTFSC  03.2
03EC:  GOTO   41C
03ED:  BSF    03.5
03EE:  MOVF   7A,W
03EF:  BTFSS  03.2
03F0:  GOTO   3F7
03F1:  MOVLW  01
03F2:  SUBWF  77,W
03F3:  BCF    03.5
03F4:  BTFSC  03.2
03F5:  GOTO   443
03F6:  BSF    03.5
03F7:  MOVF   7A,W
03F8:  BTFSS  03.2
03F9:  GOTO   400
03FA:  MOVLW  02
03FB:  SUBWF  77,W
03FC:  BCF    03.5
03FD:  BTFSC  03.2
03FE:  GOTO   4A9
03FF:  BSF    03.5
0400:  MOVF   7A,W
0401:  BTFSS  03.2
0402:  GOTO   409
0403:  MOVLW  03
0404:  SUBWF  77,W
0405:  BCF    03.5
0406:  BTFSC  03.2
0407:  GOTO   50E
0408:  BSF    03.5
0409:  MOVF   7A,W
040A:  BTFSS  03.2
040B:  GOTO   412
040C:  MOVLW  04
040D:  SUBWF  77,W
040E:  BCF    03.5
040F:  BTFSC  03.2
0410:  GOTO   574
0411:  BSF    03.5
0412:  MOVF   7A,W
0413:  BTFSS  03.2
0414:  GOTO   41B
0415:  MOVLW  05
0416:  SUBWF  77,W
0417:  BCF    03.5
0418:  BTFSC  03.2
0419:  GOTO   5D9
041A:  BSF    03.5
041B:  GOTO   698
....................  { 
....................   case 0: 
....................    dht_display(); 
....................   break; 
*
0441:  BSF    03.5
0442:  GOTO   698
....................   case 1: 
....................    temp_up_set(); 
....................   break; 
*
04A7:  BSF    03.5
04A8:  GOTO   698
....................   case 2: 
....................    temp_down_set(); 
....................   break; 
*
050C:  BSF    03.5
050D:  GOTO   698
....................   case 3: 
....................    hum_up_set(); 
....................   break; 
*
0572:  BSF    03.5
0573:  GOTO   698
....................   case 4: 
....................    hum_down_set(); 
....................   break; 
*
05D7:  BSF    03.5
05D8:  GOTO   698
....................   case 5: 
....................   if(temp_low >= temp_high && hum_low >= hum_high) 
05D9:  BSF    03.5
05DA:  BTFSS  26.7
05DB:  GOTO   5DF
05DC:  BTFSS  28.7
05DD:  GOTO   5EB
05DE:  GOTO   5E1
05DF:  BTFSC  28.7
05E0:  GOTO   614
05E1:  MOVF   26,W
05E2:  SUBWF  28,W
05E3:  BTFSS  03.0
05E4:  GOTO   614
05E5:  BTFSS  03.2
05E6:  GOTO   5EB
05E7:  MOVF   25,W
05E8:  SUBWF  27,W
05E9:  BTFSS  03.0
05EA:  GOTO   614
05EB:  BTFSS  2A.7
05EC:  GOTO   5F0
05ED:  BTFSS  2C.7
05EE:  GOTO   5FC
05EF:  GOTO   5F2
05F0:  BTFSC  2C.7
05F1:  GOTO   614
05F2:  MOVF   2A,W
05F3:  SUBWF  2C,W
05F4:  BTFSS  03.0
05F5:  GOTO   614
05F6:  BTFSS  03.2
05F7:  GOTO   5FC
05F8:  MOVF   29,W
05F9:  SUBWF  2B,W
05FA:  BTFSS  03.0
05FB:  GOTO   614
....................   { 
....................    display_err(); 
....................    delay_ms(1000); 
*
0609:  MOVLW  04
060A:  BSF    03.5
060B:  MOVWF  3F
060C:  MOVLW  FA
060D:  MOVWF  44
060E:  BCF    03.5
060F:  CALL   0ED
0610:  BSF    03.5
0611:  DECFSZ 3F,F
0612:  GOTO   60C
....................   }else { 
0613:  GOTO   696
....................    write_eeprom(0,(int8)temp_high); 
0614:  BCF    03.5
0615:  MOVF   0B,W
0616:  MOVWF  77
0617:  BCF    0B.7
0618:  BSF    03.6
0619:  CLRF   0D
061A:  BSF    03.5
061B:  BCF    03.6
061C:  MOVF   25,W
061D:  BCF    03.5
061E:  BSF    03.6
061F:  MOVWF  0C
0620:  BSF    03.5
0621:  BCF    0C.7
0622:  BSF    0C.2
0623:  MOVLW  55
0624:  MOVWF  0D
0625:  MOVLW  AA
0626:  MOVWF  0D
0627:  BSF    0C.1
0628:  BTFSC  0C.1
0629:  GOTO   628
062A:  BCF    0C.2
062B:  MOVF   77,W
062C:  BCF    03.5
062D:  BCF    03.6
062E:  IORWF  0B,F
....................    write_eeprom(1,(int8)temp_low); 
062F:  MOVF   0B,W
0630:  MOVWF  77
0631:  BCF    0B.7
0632:  MOVLW  01
0633:  BSF    03.6
0634:  MOVWF  0D
0635:  BSF    03.5
0636:  BCF    03.6
0637:  MOVF   27,W
0638:  BCF    03.5
0639:  BSF    03.6
063A:  MOVWF  0C
063B:  BSF    03.5
063C:  BCF    0C.7
063D:  BSF    0C.2
063E:  MOVLW  55
063F:  MOVWF  0D
0640:  MOVLW  AA
0641:  MOVWF  0D
0642:  BSF    0C.1
0643:  BTFSC  0C.1
0644:  GOTO   643
0645:  BCF    0C.2
0646:  MOVF   77,W
0647:  BCF    03.5
0648:  BCF    03.6
0649:  IORWF  0B,F
....................    write_eeprom(2,(int8)hum_high); 
064A:  MOVF   0B,W
064B:  MOVWF  77
064C:  BCF    0B.7
064D:  MOVLW  02
064E:  BSF    03.6
064F:  MOVWF  0D
0650:  BSF    03.5
0651:  BCF    03.6
0652:  MOVF   29,W
0653:  BCF    03.5
0654:  BSF    03.6
0655:  MOVWF  0C
0656:  BSF    03.5
0657:  BCF    0C.7
0658:  BSF    0C.2
0659:  MOVLW  55
065A:  MOVWF  0D
065B:  MOVLW  AA
065C:  MOVWF  0D
065D:  BSF    0C.1
065E:  BTFSC  0C.1
065F:  GOTO   65E
0660:  BCF    0C.2
0661:  MOVF   77,W
0662:  BCF    03.5
0663:  BCF    03.6
0664:  IORWF  0B,F
....................    write_eeprom(3,(int8)hum_low); 
0665:  MOVF   0B,W
0666:  MOVWF  77
0667:  BCF    0B.7
0668:  MOVLW  03
0669:  BSF    03.6
066A:  MOVWF  0D
066B:  BSF    03.5
066C:  BCF    03.6
066D:  MOVF   2B,W
066E:  BCF    03.5
066F:  BSF    03.6
0670:  MOVWF  0C
0671:  BSF    03.5
0672:  BCF    0C.7
0673:  BSF    0C.2
0674:  MOVLW  55
0675:  MOVWF  0D
0676:  MOVLW  AA
0677:  MOVWF  0D
0678:  BSF    0C.1
0679:  BTFSC  0C.1
067A:  GOTO   679
067B:  BCF    0C.2
067C:  MOVF   77,W
067D:  BCF    03.5
067E:  BCF    03.6
067F:  IORWF  0B,F
....................    display_ok(); 
....................    delay_ms(1000); 
*
068C:  MOVLW  04
068D:  BSF    03.5
068E:  MOVWF  3F
068F:  MOVLW  FA
0690:  MOVWF  44
0691:  BCF    03.5
0692:  CALL   0ED
0693:  BSF    03.5
0694:  DECFSZ 3F,F
0695:  GOTO   68F
....................   } 
....................   menu_counter = 0; 
0696:  CLRF   2E
0697:  CLRF   2D
....................   break; 
....................  } 
....................  while(set_button == press); 
0698:  BCF    03.5
0699:  BTFSS  09.0
069A:  GOTO   699
069B:  BSF    0A.3
069C:  BCF    0A.4
069D:  GOTO   3A7 (RETURN)
.................... } 
.................... void dht11_RunTime() 
.................... { 
....................       Time_out = 0; 
*
08D9:  BCF    4B.0
....................       Start_signal () ; 
....................       if (check_response ()) 
*
0909:  MOVF   78,F
090A:  BTFSC  03.2
090B:  GOTO   22F
....................       { 
....................          // if there is a response from sensor 
....................                RH_byte1 = Read_Data(); // read RH byte1 
090C:  BCF    0A.3
090D:  CALL   69E
090E:  BSF    0A.3
090F:  MOVF   78,W
0910:  MOVWF  4E
....................                RH_byte2 = Read_Data(); // read RH byte2 
0911:  BCF    0A.3
0912:  CALL   69E
0913:  BSF    0A.3
0914:  MOVF   78,W
0915:  MOVWF  4F
....................                T_byte1 = Read_Data();  // read T byte1 
0916:  BCF    0A.3
0917:  CALL   69E
0918:  BSF    0A.3
0919:  MOVF   78,W
091A:  MOVWF  4C
....................                T_byte2 = Read_Data();  // read T byte2 
091B:  BCF    0A.3
091C:  CALL   69E
091D:  BSF    0A.3
091E:  MOVF   78,W
091F:  MOVWF  4D
....................                Checksum = Read_Data(); // read checksum 
0920:  BCF    0A.3
0921:  CALL   69E
0922:  BSF    0A.3
0923:  MOVF   78,W
0924:  MOVWF  50
....................        
....................          if (Time_out) 
0925:  BTFSS  4B.0
0926:  GOTO   141
....................          { 
....................             // If reading takes long time 
....................             lcd_putc ('\f'); // LCD clear 
0927:  MOVLW  0C
0928:  BSF    03.5
0929:  MOVWF  42
092A:  BCF    0A.3
092B:  BCF    03.5
092C:  CALL   234
092D:  BSF    0A.3
....................             lcd_gotoxy (5, 1); // Go to column 5 row 1 
092E:  MOVLW  05
092F:  BSF    03.5
0930:  MOVWF  43
0931:  MOVLW  01
0932:  MOVWF  44
0933:  BCF    0A.3
0934:  BCF    03.5
0935:  CALL   220
0936:  BSF    0A.3
....................             lcd_putc ("Time out ! ") ; 
0937:  MOVLW  4F
0938:  BSF    03.6
0939:  MOVWF  0D
093A:  MOVLW  00
093B:  MOVWF  0F
093C:  BCF    0A.3
093D:  BCF    03.6
093E:  CALL   700
093F:  BSF    0A.3
.................... //!            display_set_off () ; 
....................          } 
0940:  GOTO   22E
....................          else 
....................          { 
....................             if (CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2)&0xFF)) 
0941:  MOVF   4F,W
0942:  ADDWF  4E,W
0943:  ADDWF  4C,W
0944:  ADDWF  4D,W
0945:  SUBWF  50,W
0946:  BTFSS  03.2
0947:  GOTO   216
....................             { 
....................                message1[7] = T_Byte1 / 10 + 48; 
0948:  MOVF   4C,W
0949:  BSF    03.5
094A:  MOVWF  3F
094B:  MOVLW  0A
094C:  MOVWF  40
094D:  BCF    0A.3
094E:  BCF    03.5
094F:  CALL   774
0950:  BSF    0A.3
0951:  MOVLW  30
0952:  ADDWF  78,W
0953:  MOVWF  32
....................                message1[8] = T_Byte1 % 10 + 48; 
0954:  MOVF   4C,W
0955:  BSF    03.5
0956:  MOVWF  3F
0957:  MOVLW  0A
0958:  MOVWF  40
0959:  BCF    0A.3
095A:  BCF    03.5
095B:  CALL   774
095C:  BSF    0A.3
095D:  MOVLW  30
095E:  ADDWF  77,W
095F:  MOVWF  33
....................                message1[10] = T_Byte2 / 10 + 48; 
0960:  MOVF   4D,W
0961:  BSF    03.5
0962:  MOVWF  3F
0963:  MOVLW  0A
0964:  MOVWF  40
0965:  BCF    0A.3
0966:  BCF    03.5
0967:  CALL   774
0968:  BSF    0A.3
0969:  MOVLW  30
096A:  ADDWF  78,W
096B:  MOVWF  35
....................                message2[7] = RH_Byte1 / 10 + 48; 
096C:  MOVF   4E,W
096D:  BSF    03.5
096E:  MOVWF  3F
096F:  MOVLW  0A
0970:  MOVWF  40
0971:  BCF    0A.3
0972:  BCF    03.5
0973:  CALL   774
0974:  BSF    0A.3
0975:  MOVLW  30
0976:  ADDWF  78,W
0977:  MOVWF  42
....................                message2[8] = RH_Byte1 % 10 + 48; 
0978:  MOVF   4E,W
0979:  BSF    03.5
097A:  MOVWF  3F
097B:  MOVLW  0A
097C:  MOVWF  40
097D:  BCF    0A.3
097E:  BCF    03.5
097F:  CALL   774
0980:  BSF    0A.3
0981:  MOVLW  30
0982:  ADDWF  77,W
0983:  MOVWF  43
....................                message2[10] = RH_Byte2 / 10 + 48; 
0984:  MOVF   4F,W
0985:  BSF    03.5
0986:  MOVWF  3F
0987:  MOVLW  0A
0988:  MOVWF  40
0989:  BCF    0A.3
098A:  BCF    03.5
098B:  CALL   774
098C:  BSF    0A.3
098D:  MOVLW  30
098E:  ADDWF  78,W
098F:  MOVWF  45
....................                message1[11] = 223; // Degree symbol 
0990:  MOVLW  DF
0991:  MOVWF  36
....................                main_temp = ((message1[7]-48)*10)+(message1[8]-48); 
0992:  MOVLW  30
0993:  SUBWF  32,W
0994:  BSF    03.5
0995:  MOVWF  40
0996:  MOVWF  41
0997:  MOVLW  0A
0998:  MOVWF  42
0999:  BCF    0A.3
099A:  BCF    03.5
099B:  CALL   78B
099C:  BSF    0A.3
099D:  MOVF   78,W
099E:  BSF    03.5
099F:  MOVWF  3F
09A0:  MOVLW  30
09A1:  BCF    03.5
09A2:  SUBWF  33,W
09A3:  BSF    03.5
09A4:  ADDWF  3F,W
09A5:  CLRF   7A
09A6:  MOVWF  2F
09A7:  MOVF   7A,W
09A8:  MOVWF  30
....................                main_hum =((message2[7]-48)*10)+(message2[8]-48);       
09A9:  MOVLW  30
09AA:  BCF    03.5
09AB:  SUBWF  42,W
09AC:  BSF    03.5
09AD:  MOVWF  40
09AE:  MOVWF  41
09AF:  MOVLW  0A
09B0:  MOVWF  42
09B1:  BCF    0A.3
09B2:  BCF    03.5
09B3:  CALL   78B
09B4:  BSF    0A.3
09B5:  MOVF   78,W
09B6:  BSF    03.5
09B7:  MOVWF  3F
09B8:  MOVLW  30
09B9:  BCF    03.5
09BA:  SUBWF  43,W
09BB:  BSF    03.5
09BC:  ADDWF  3F,W
09BD:  CLRF   7A
09BE:  MOVWF  31
09BF:  MOVF   7A,W
09C0:  MOVWF  32
....................                printf("Temp:%lu Hum:%lu \n\r",main_temp,main_hum); 
09C1:  MOVLW  55
09C2:  BCF    03.5
09C3:  BSF    03.6
09C4:  MOVWF  0D
09C5:  MOVLW  00
09C6:  MOVWF  0F
09C7:  BCF    03.0
09C8:  MOVLW  05
09C9:  BSF    03.5
09CA:  BCF    03.6
09CB:  MOVWF  3F
09CC:  BCF    03.5
09CD:  CALL   000
09CE:  MOVLW  10
09CF:  MOVWF  04
09D0:  BSF    03.5
09D1:  MOVF   30,W
09D2:  MOVWF  40
09D3:  MOVF   2F,W
09D4:  MOVWF  3F
09D5:  BCF    03.5
09D6:  CALL   07C
09D7:  MOVLW  59
09D8:  BSF    03.6
09D9:  MOVWF  0D
09DA:  MOVLW  00
09DB:  MOVWF  0F
09DC:  BCF    03.0
09DD:  MOVLW  05
09DE:  BSF    03.5
09DF:  BCF    03.6
09E0:  MOVWF  3F
09E1:  BCF    03.5
09E2:  CALL   000
09E3:  MOVLW  10
09E4:  MOVWF  04
09E5:  BSF    03.5
09E6:  MOVF   32,W
09E7:  MOVWF  40
09E8:  MOVF   31,W
09E9:  MOVWF  3F
09EA:  BCF    03.5
09EB:  CALL   07C
09EC:  MOVLW  20
09ED:  BTFSS  0C.4
09EE:  GOTO   1ED
09EF:  MOVWF  19
09F0:  MOVLW  0A
09F1:  BTFSS  0C.4
09F2:  GOTO   1F1
09F3:  MOVWF  19
09F4:  MOVLW  0D
09F5:  BTFSS  0C.4
09F6:  GOTO   1F5
09F7:  MOVWF  19
....................                lcd_gotoxy (1, 1);   // Go to column 1 row 1 
09F8:  MOVLW  01
09F9:  BSF    03.5
09FA:  MOVWF  43
09FB:  MOVWF  44
09FC:  BCF    0A.3
09FD:  BCF    03.5
09FE:  CALL   220
09FF:  BSF    0A.3
....................                printf (lcd_putc, message1); // Display message1 
0A00:  MOVLW  2B
0A01:  MOVWF  04
0A02:  BCF    03.7
0A03:  BCF    0A.3
0A04:  CALL   7B2
0A05:  BSF    0A.3
....................                lcd_gotoxy (1, 2);   // Go to column 1 row 2 
0A06:  MOVLW  01
0A07:  BSF    03.5
0A08:  MOVWF  43
0A09:  MOVLW  02
0A0A:  MOVWF  44
0A0B:  BCF    0A.3
0A0C:  BCF    03.5
0A0D:  CALL   220
0A0E:  BSF    0A.3
....................                printf (lcd_putc, message2); // Display message2 
0A0F:  MOVLW  3B
0A10:  MOVWF  04
0A11:  BCF    03.7
0A12:  BCF    0A.3
0A13:  CALL   7B2
0A14:  BSF    0A.3
....................             } 
0A15:  GOTO   22E
....................             else 
....................             { 
....................                lcd_putc ('\f'); // LCD clear 
0A16:  MOVLW  0C
0A17:  BSF    03.5
0A18:  MOVWF  42
0A19:  BCF    0A.3
0A1A:  BCF    03.5
0A1B:  CALL   234
0A1C:  BSF    0A.3
....................                lcd_gotoxy (1, 1); // Go to column 1 row 1 
0A1D:  MOVLW  01
0A1E:  BSF    03.5
0A1F:  MOVWF  43
0A20:  MOVWF  44
0A21:  BCF    0A.3
0A22:  BCF    03.5
0A23:  CALL   220
0A24:  BSF    0A.3
....................                lcd_putc ("Checksum Error ! ") ; 
0A25:  MOVLW  5F
0A26:  BSF    03.6
0A27:  MOVWF  0D
0A28:  MOVLW  00
0A29:  MOVWF  0F
0A2A:  BCF    0A.3
0A2B:  BCF    03.6
0A2C:  CALL   700
0A2D:  BSF    0A.3
.................... //!               display_set_off () ; 
....................             } 
....................          } 
....................       } 
0A2E:  GOTO   25A
....................       else 
....................       { 
....................          lcd_putc ('\f'); // LCD clear 
0A2F:  MOVLW  0C
0A30:  BSF    03.5
0A31:  MOVWF  42
0A32:  BCF    0A.3
0A33:  BCF    03.5
0A34:  CALL   234
0A35:  BSF    0A.3
....................          lcd_gotoxy (3, 1); // Go to column 3 row 1 
0A36:  MOVLW  03
0A37:  BSF    03.5
0A38:  MOVWF  43
0A39:  MOVLW  01
0A3A:  MOVWF  44
0A3B:  BCF    0A.3
0A3C:  BCF    03.5
0A3D:  CALL   220
0A3E:  BSF    0A.3
....................          lcd_putc ("No response") ; 
0A3F:  MOVLW  68
0A40:  BSF    03.6
0A41:  MOVWF  0D
0A42:  MOVLW  00
0A43:  MOVWF  0F
0A44:  BCF    0A.3
0A45:  BCF    03.6
0A46:  CALL   700
0A47:  BSF    0A.3
....................          lcd_gotoxy (1, 2); // Go to column 1 row 2 
0A48:  MOVLW  01
0A49:  BSF    03.5
0A4A:  MOVWF  43
0A4B:  MOVLW  02
0A4C:  MOVWF  44
0A4D:  BCF    0A.3
0A4E:  BCF    03.5
0A4F:  CALL   220
0A50:  BSF    0A.3
....................          lcd_putc ("from the sensor") ; 
0A51:  MOVLW  6E
0A52:  BSF    03.6
0A53:  MOVWF  0D
0A54:  MOVLW  00
0A55:  MOVWF  0F
0A56:  BCF    0A.3
0A57:  BCF    03.6
0A58:  CALL   700
0A59:  BSF    0A.3
....................       } 
0A5A:  BSF    0A.3
0A5B:  BCF    0A.4
0A5C:  GOTO   3A9 (RETURN)
.................... } 
....................  
.................... //!#int_TIMER1  
.................... //!void TIMER1_isr(void) 
.................... //!{ 
.................... //!   SET_TIMER1 (0); 
.................... //!   Start_signal () ; 
.................... //!   if (check_response ()) 
.................... //!   { 
.................... //!      RH_byte1 = Read_Data (); // read RH byte1 
.................... //!      RH_byte2 = Read_Data (); // read RH byte2 
.................... //!      T_byte1 = Read_Data (); // read T byte1 
.................... //!      T_byte2 = Read_Data (); // read T byte2 
.................... //!      Checksum = Read_Data (); // read checksum 
.................... //!      dataReady = 1; 
.................... //!   } 
.................... //!} 
....................  
.................... #int_TIMER0 
.................... void TIMER0_isr(void) 
.................... { 
....................    static int8 number_of_segment = 0; 
....................    SET_TIMER0 (100); 
*
0076:  MOVLW  64
0077:  MOVWF  01
....................    output_c (0); 
0078:  MOVLW  00
0079:  BSF    03.5
007A:  MOVWF  3E
007B:  CLRF   07
007C:  BCF    03.5
007D:  CLRF   07
....................    number_of_segment++; 
007E:  BSF    03.5
007F:  INCF   3D,F
....................    switch (number_of_segment) 
0080:  MOVLW  01
0081:  SUBWF  3D,W
0082:  ADDLW  FA
0083:  BTFSC  03.0
0084:  GOTO   0DE
0085:  ADDLW  06
0086:  BCF    03.5
0087:  GOTO   0E3
....................    { 
....................       case 1: 
....................       output_b (digit_one&0x7F); 
0088:  MOVF   65,W
0089:  ANDLW  7F
008A:  BSF    03.5
008B:  MOVWF  4D
008C:  BCF    03.5
008D:  MOVWF  06
....................       digit_one_on;       
008E:  BSF    03.5
008F:  BCF    3E.0
0090:  MOVF   3E,W
0091:  MOVWF  07
0092:  BCF    03.5
0093:  BSF    07.0
....................       break; 
0094:  BSF    03.5
0095:  GOTO   0DE
....................       case 2: 
....................       output_b (digit_two|0b10000000) ; 
0096:  MOVF   66,W
0097:  IORLW  80
0098:  BSF    03.5
0099:  MOVWF  4D
009A:  BCF    03.5
009B:  MOVWF  06
....................       digit_two_on; 
009C:  BSF    03.5
009D:  BCF    3E.1
009E:  MOVF   3E,W
009F:  MOVWF  07
00A0:  BCF    03.5
00A1:  BSF    07.1
....................       break; 
00A2:  BSF    03.5
00A3:  GOTO   0DE
....................       case 3: 
....................       output_b (digit_three&0x7F) ; 
00A4:  MOVF   67,W
00A5:  ANDLW  7F
00A6:  BSF    03.5
00A7:  MOVWF  4D
00A8:  BCF    03.5
00A9:  MOVWF  06
....................       digit_three_on; 
00AA:  BSF    03.5
00AB:  BCF    3E.2
00AC:  MOVF   3E,W
00AD:  MOVWF  07
00AE:  BCF    03.5
00AF:  BSF    07.2
....................       break; 
00B0:  BSF    03.5
00B1:  GOTO   0DE
....................       case 4: 
....................       output_b (digit_four&0x7F) ; 
00B2:  MOVF   68,W
00B3:  ANDLW  7F
00B4:  BSF    03.5
00B5:  MOVWF  4D
00B6:  BCF    03.5
00B7:  MOVWF  06
....................       digit_four_on; 
00B8:  BSF    03.5
00B9:  BCF    3E.3
00BA:  MOVF   3E,W
00BB:  MOVWF  07
00BC:  BCF    03.5
00BD:  BSF    07.3
....................       break; 
00BE:  BSF    03.5
00BF:  GOTO   0DE
....................       case 5: 
....................       output_b (digit_five&0x7F) ; 
00C0:  MOVF   69,W
00C1:  ANDLW  7F
00C2:  BSF    03.5
00C3:  MOVWF  4D
00C4:  BCF    03.5
00C5:  MOVWF  06
....................       digit_five_on; 
00C6:  BSF    03.5
00C7:  BCF    3E.4
00C8:  MOVF   3E,W
00C9:  MOVWF  07
00CA:  BCF    03.5
00CB:  BSF    07.4
....................       break; 
00CC:  BSF    03.5
00CD:  GOTO   0DE
....................       case 6: 
....................       output_b (digit_six&0x7F) ; 
00CE:  MOVF   6A,W
00CF:  ANDLW  7F
00D0:  BSF    03.5
00D1:  MOVWF  4D
00D2:  BCF    03.5
00D3:  MOVWF  06
....................       digit_six_on; 
00D4:  BSF    03.5
00D5:  BCF    3E.5
00D6:  MOVF   3E,W
00D7:  MOVWF  07
00D8:  BCF    03.5
00D9:  BSF    07.5
....................       number_of_segment = 0; 
00DA:  BSF    03.5
00DB:  CLRF   3D
....................       break; 
00DC:  GOTO   0DE
00DD:  BSF    03.5
....................    } 
.................... //!   if (number_of_segment == 1) 
.................... //!   { 
.................... //!      output_b (digit_one&0x7F) ; 
.................... //!      digit_one_on; 
.................... //!   } 
.................... //! 
.................... //!   else if (number_of_segment == 2) 
.................... //!   { 
.................... //!      output_b (digit_two|0b10000000) ; 
.................... //!      digit_two_on; 
.................... //!   } 
.................... //! 
.................... //!   else if (number_of_segment == 3) 
.................... //!   { 
.................... //!      output_b (digit_three&0x7F) ; 
.................... //!      digit_three_on; 
.................... //!   } 
.................... //! 
.................... //!   else if (number_of_segment == 4) 
.................... //!   { 
.................... //!      output_b (digit_four&0x7F) ; 
.................... //!      digit_four_on; 
.................... //!   } 
.................... //! 
.................... //!   else if (number_of_segment == 5) 
.................... //!   { 
.................... //!      output_b (digit_five&0x7F) ; 
.................... //!      digit_five_on; 
.................... //!   } 
.................... //! 
.................... //!   else if (number_of_segment == 6) 
.................... //!   { 
.................... //!      output_b (digit_six&0x7F) ; 
.................... //!      digit_six_on; 
.................... //!      number_of_segment = 0; 
.................... //!   } 
00DE:  BCF    03.5
00DF:  BCF    0B.2
00E0:  BCF    0A.3
00E1:  BCF    0A.4
00E2:  GOTO   02B
.................... } 
....................  
....................  

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

ROM data:
002100: 0019 0014 0032 0028 0000 0000 0000 0000    .....2.(........
